<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello Hexo</title>
    <url>/2021/05/12/1.Hello-Hexo/</url>
    <content><![CDATA[<h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>直接在/source/_posts中添加markdown文件</p>
<h2 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; hexo server</span><br></pre></td></tr></table></figure>

<h2 id="发布到gitpages"><a href="#发布到gitpages" class="headerlink" title="发布到gitpages"></a>发布到gitpages</h2><p>先删除根目录.deploy_git<br>然后执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; hexo clean &amp;&amp; hexo d -g</span><br></pre></td></tr></table></figure>

<h2 id="加速镜像地址"><a href="#加速镜像地址" class="headerlink" title="加速镜像地址"></a>加速镜像地址</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; github.com.cnpmjs.org</span><br></pre></td></tr></table></figure>

<h2 id="修改样式后编译sass"><a href="#修改样式后编译sass" class="headerlink" title="修改样式后编译sass"></a>修改样式后编译sass</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; sass main.scss output.css</span><br><span class="line"># 将生成的output.css内容粘贴到\themes\yilia\source\main.0cf68a.css中</span><br></pre></td></tr></table></figure>

<h2 id="修改并重新编译整个yilia"><a href="#修改并重新编译整个yilia" class="headerlink" title="修改并重新编译整个yilia"></a>修改并重新编译整个yilia</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; npm install</span><br><span class="line"># 其中发现node-sass版本太老，把package.json中的node-sass版本改为6.0.0之后重新install</span><br><span class="line">&gt; npm run dev</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>setting</tag>
        <tag>说明</tag>
      </tags>
  </entry>
  <entry>
    <title>postgreSQL配置远程访问</title>
    <url>/2021/06/22/11.postgreSQL%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h4 id="1-修改pg-hba-conf"><a href="#1-修改pg-hba-conf" class="headerlink" title="1.修改pg_hba.conf"></a>1.修改pg_hba.conf</h4><p>添加允许访问IP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">host all all 0.0.0.0/0 md5</span><br></pre></td></tr></table></figure>
<h4 id="2-修改监听配置"><a href="#2-修改监听配置" class="headerlink" title="2.修改监听配置"></a>2.修改监听配置</h4><p>修改 postgresql.conf文件中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">listen_addresses = &#x27;localhost&#x27; # what IP address(es) to listen on;</span><br></pre></td></tr></table></figure>
<p>为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">listen_addresses = &#x27;*&#x27; # what IP address(es) to listen on;</span><br></pre></td></tr></table></figure>
<h4 id="3-重启数据库服务"><a href="#3-重启数据库服务" class="headerlink" title="3.重启数据库服务"></a>3.重启数据库服务</h4>]]></content>
      <categories>
        <category>研发日志</category>
      </categories>
      <tags>
        <tag>postgreSql</tag>
      </tags>
  </entry>
  <entry>
    <title>利用nginx实现负载均衡</title>
    <url>/2021/06/19/10.%E5%88%A9%E7%94%A8nginx%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<pre><code>近期学习springcloud alibaba，学会了用nacos实现负载均衡，但是通过nacos实现负载均衡的前提是必须注册成为“服务消费者”，然而很多情况下，需要接收第三方服务发来的http请求，无法注册成为消费者，那之前配置的nacos负载均衡就会失效。

经过研究，决定启用nacos+nginx的方案，不知道亮着是否会有冲突，这里只是一个试验和配置记录。
</code></pre>
<blockquote>
<p>nginx 官方说支持50000个并发访问</p>
</blockquote>
<blockquote>
<p>nginx 不支持中文路径</p>
</blockquote>
<h3 id="nginx常用命令"><a href="#nginx常用命令" class="headerlink" title="nginx常用命令"></a>nginx常用命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./nginx 启动</span><br><span class="line">./nginx -s stop 停止</span><br><span class="line">./nginx -s quit 安全退出</span><br><span class="line">./nginx -s reload 重新加载配置文件</span><br></pre></td></tr></table></figure>

<h3 id="nginx负载均衡配置"><a href="#nginx负载均衡配置" class="headerlink" title="nginx负载均衡配置"></a>nginx负载均衡配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    #负载均衡配置</span><br><span class="line">    upstream  demo &#123;</span><br><span class="line">       server    localhost:9001 weight=1;</span><br><span class="line">       server    localhost:9002 weight=2;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   server &#123;</span><br><span class="line">       listen       9000;</span><br><span class="line">       server_name  localhost;</span><br><span class="line">      </span><br><span class="line"> </span><br><span class="line">       location / &#123;</span><br><span class="line">        proxy_pass http://demo;</span><br><span class="line">        proxy_redirect default;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>12.MySql、Oracle、MSSqlServer、PostgreSql性能测评</title>
    <url>/2021/06/23/12.MySql%E3%80%81Oracle%E3%80%81MSSqlServer%E3%80%81PostgreSql%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%84/</url>
    <content><![CDATA[<h4 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h4><p>公司一直在用MySql，最近由于业务量增大，数据压力也越来越大，MySQL的问题也逐渐暴露出来，之前只听说mysql性能不行，没想到几千条数据之间的关联查询也卡到需要优化的地步。 </p>
<p>我之前用过很长一段时间的SqlServer，一般是数据量达到十万级以上才开始进行优化，几千条数据的表都是随便写逻辑的，从来不考虑性能问题，这让我产生了兴趣，想看看MySQL性能到底有多差。</p>
<p>既然要测评，所幸把最近非常火的PostgreSql和DB界老大Oracle也拉出来一起玩玩。</p>
<blockquote>
<p>由于第一次接触PostgreSql和Oracle，配置方面不太了解，以下对这两种数据库的测试结果可能不是最优情况。Oracle大神勿喷。</p>
</blockquote>
<h4 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h4><p>阿里云服务器 4核16G内存<br>Windows Server2012R2 x64<br>5Mbps带宽<br>高效云盘(2120IOPS)</p>
<h4 id="数据库版本"><a href="#数据库版本" class="headerlink" title="数据库版本"></a>数据库版本</h4><p>MySql 8.0.19<br>Oracle 11G 企业版<br>MSSqlServer 2012 企业版<br>PostgreSql 13.3-2</p>
<h4 id="数据库脚本（仅mysql）"><a href="#数据库脚本（仅mysql）" class="headerlink" title="数据库脚本（仅mysql）"></a>数据库脚本（仅mysql）</h4><p>数据库脚本只粘mysql的了，其他几种数据库大同小异</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `itest_table`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `str` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> gbk <span class="keyword">COLLATE</span> gbk_chinese_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `iname` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> gbk <span class="keyword">COLLATE</span> gbk_chinese_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  INDEX `inameindex`(`iname`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> gbk <span class="keyword">COLLATE</span> <span class="operator">=</span> gbk_chinese_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br></pre></td></tr></table></figure>

<h4 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h4><p>测试程序 java + springboot + mybatis<br>为了贴近实际的生产环境，是用java程序在本地进行的测试，而数据库是在服务器上，所以测试结果可能受网络影响。 </p>
<p>但考虑到生产环境下的执行效率也会受到网络和代码逻辑的影响，所以感觉本测试虽然不如专业的数据库测评结果准确，但是却更实用。 </p>
<p>四种数据库是一套程序，仅数据源不同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实体</span></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItestTable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    String str;</span><br><span class="line">    String iname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mapper</span></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItestTableMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from itest_table&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ItestTable&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from itest_table where str like &#x27;%$&#123;str&#125;%&#x27;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ItestTable&gt; <span class="title">selectByStr</span><span class="params">(<span class="meta">@Param(&quot;str&quot;)</span>String str)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from itest_table where iname = #&#123;iname&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ItestTable&gt; <span class="title">selectByIname</span><span class="params">(<span class="meta">@Param(&quot;iname&quot;)</span>String iname)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into itest_table(str,iname) values(#&#123;str&#125;,#&#123;iname&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="meta">@Param(&quot;str&quot;)</span> String str, <span class="meta">@Param(&quot;iname&quot;)</span> String iname)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update itest_table set str = &#x27;修改后&#x27; where iname = &#x27;乙&#x27;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试用例</span></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootDemoApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ItestTableMapper itestTableMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//首先清空全部数据</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert1000</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;赵钱孙李周吴郑王冯陈褚卫蒋沈韩杨&quot;</span>;</span><br><span class="line">        String[] nameAyy = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;甲&quot;</span>,<span class="string">&quot;乙&quot;</span>,<span class="string">&quot;丙&quot;</span>,<span class="string">&quot;丁&quot;</span>,<span class="string">&quot;戊&quot;</span>,<span class="string">&quot;己&quot;</span>,<span class="string">&quot;庚&quot;</span>,<span class="string">&quot;辛&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">long</span> stime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            itestTableMapper.insert(str+i,nameAyy[i%<span class="number">4</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> etime = System.currentTimeMillis();</span><br><span class="line">        System.out.printf(<span class="string">&quot;执行时长：%d 毫秒.&quot;</span>, (etime - stime));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select1000</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> stime = System.currentTimeMillis();</span><br><span class="line">        List&lt;ItestTable&gt; list = itestTableMapper.selectAll();</span><br><span class="line">        <span class="keyword">long</span> etime = System.currentTimeMillis();</span><br><span class="line">        System.out.printf(<span class="string">&quot;执行时长：%d 毫秒.&quot;</span>, (etime - stime));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert10000</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;赵钱孙李周吴郑王冯陈褚卫蒋沈韩杨&quot;</span>;</span><br><span class="line">        String[] nameAyy = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;甲&quot;</span>,<span class="string">&quot;乙&quot;</span>,<span class="string">&quot;丙&quot;</span>,<span class="string">&quot;丁&quot;</span>,<span class="string">&quot;戊&quot;</span>,<span class="string">&quot;己&quot;</span>,<span class="string">&quot;庚&quot;</span>,<span class="string">&quot;辛&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">long</span> stime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            itestTableMapper.insert(str+i,nameAyy[i%<span class="number">4</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> etime = System.currentTimeMillis();</span><br><span class="line">        System.out.printf(<span class="string">&quot;执行时长：%d 毫秒.&quot;</span>, (etime - stime));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select11000</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> stime = System.currentTimeMillis();</span><br><span class="line">        List&lt;ItestTable&gt; list = itestTableMapper.selectAll();</span><br><span class="line">        <span class="keyword">long</span> etime = System.currentTimeMillis();</span><br><span class="line">        System.out.printf(<span class="string">&quot;执行时长：%d 毫秒.&quot;</span>, (etime - stime));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此时创建索引</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert10000WithIndex</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;赵钱孙李周吴郑王冯陈褚卫蒋沈韩杨&quot;</span>;</span><br><span class="line">        String[] nameAyy = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;甲&quot;</span>,<span class="string">&quot;乙&quot;</span>,<span class="string">&quot;丙&quot;</span>,<span class="string">&quot;丁&quot;</span>,<span class="string">&quot;戊&quot;</span>,<span class="string">&quot;己&quot;</span>,<span class="string">&quot;庚&quot;</span>,<span class="string">&quot;辛&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">long</span> stime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            itestTableMapper.insert(str+i,nameAyy[i%<span class="number">4</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> etime = System.currentTimeMillis();</span><br><span class="line">        System.out.printf(<span class="string">&quot;执行时长：%d 毫秒.&quot;</span>, (etime - stime));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">selectNoIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> stime = System.currentTimeMillis();</span><br><span class="line">        List&lt;ItestTable&gt; list = itestTableMapper.selectByStr(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> etime = System.currentTimeMillis();</span><br><span class="line">        System.out.printf(<span class="string">&quot;执行时长：%d 毫秒.&quot;</span>, (etime - stime));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">selectWithIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> stime = System.currentTimeMillis();</span><br><span class="line">        List&lt;ItestTable&gt; list = itestTableMapper.selectByIname(<span class="string">&quot;甲&quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> etime = System.currentTimeMillis();</span><br><span class="line">        System.out.printf(<span class="string">&quot;执行时长：%d 毫秒.&quot;</span>, (etime - stime));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> stime = System.currentTimeMillis();</span><br><span class="line">        itestTableMapper.update();</span><br><span class="line">        <span class="keyword">long</span> etime = System.currentTimeMillis();</span><br><span class="line">        System.out.printf(<span class="string">&quot;执行时长：%d 毫秒.&quot;</span>, (etime - stime));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p>单位：毫秒<br><img src="http://qiniu.bigdudu.cn/1624437715(1).jpg" alt="测试结果"></p>
<h4 id="测试结论"><a href="#测试结论" class="headerlink" title="测试结论"></a>测试结论</h4><p>1.Oracle作为DB界扛把子，测评结果却不尽如人意，与网上的评价不符，怀疑是我配置的有问题，毕竟今天是我第一次安装使用Oracle，感觉安装麻烦、配置复杂，不会配置效率还超低，而且还收费！直接弃用。</p>
<p>2.MySql读写性能全面败北，优点是配置简单，且生态系统完善，有很多基于MySql开发的组件、工具，作为java程序员，想要完全放弃MySql几乎不可能；但MySql确实也不适合作为复杂业务的主力数据库，由于其轻量级的特点，可以作为辅助库参与系统。</p>
<p>3.PostgreSql最近的火爆也不是没有理由，作为完全开放源代码的数据库，插入性能方面完全碾压MySql，查询性能也毫不逊色。重点是安装配置极为简单，Oracle和PostgreSql同样为第一天接触，PostgreSql的上手难度比Oracle低很多。在不考虑生态的情况下，PostgreSql可以完全替代MySQL。若作为主力数据库，查询效率还是略显不足。</p>
<p>4.MSSqlServer的插入速度比Oracle稍有逊色，但是查询效率完全碾压其他三种数据库。有着令人意想不到的10倍的差距。而且文件体积也比较小。</p>
<p>我相信在Oracle大神的手中，Oracle性能可以碾压SqlServer，但是SqlServer却可以实现开箱即用，非常适合中小型公司的项目，且正版价格比Oracle低不少。</p>
]]></content>
      <categories>
        <category>研发日志</category>
      </categories>
      <tags>
        <tag>postgreSql</tag>
        <tag>MySql</tag>
        <tag>Oracle</tag>
        <tag>MSSqlServer</tag>
      </tags>
  </entry>
  <entry>
    <title>13.springboot maven package 打包时忽略掉指定文件夹</title>
    <url>/2021/07/12/13.springboot%20maven%20package%20%E6%89%93%E5%8C%85%E6%97%B6%E5%BF%BD%E7%95%A5%E6%8E%89%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E5%A4%B9%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<h4 id="普通war包排除文件"><a href="#普通war包排除文件" class="headerlink" title="普通war包排除文件"></a>普通war包排除文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span>   </span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>   </span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   </span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>   </span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>   </span><br><span class="line">   <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">warSourceExcludes</span>&gt;</span>src/main/resources/**<span class="tag">&lt;/<span class="name">warSourceExcludes</span>&gt;</span>   </span><br><span class="line">   <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>   </span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>   </span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>   </span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="springboot打jar包时排除文件"><a href="#springboot打jar包时排除文件" class="headerlink" title="springboot打jar包时排除文件"></a>springboot打jar包时排除文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    打包时忽略指定的资源文件    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>temp/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>研发日志</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>14.【转载】MySql安装及配置（8.0.19）</title>
    <url>/2021/07/22/14.MySql%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<blockquote>
<p>思路照抄<a href="https://blog.csdn.net/qq_37350706/article/details/81707862">MySQL 8.0.19安装教程(windows 64位)</a>，结合公司服务器环境进行重新整理。</p>
</blockquote>
<!-- TOC -->

<ul>
<li><a href="#%E4%B8%80%E4%B8%8B%E8%BD%BD%E5%8F%8A%E5%AE%89%E8%A3%85">一、下载及安装</a><ul>
<li><a href="#%E4%B8%8B%E8%BD%BDmysql8019">下载mysql8.0.19</a></li>
<li><a href="#%E9%85%8D%E7%BD%AE%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%87%E4%BB%B6-myini">配置初始化文件 my.ini</a></li>
<li><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96mysql%E5%AE%89%E8%A3%85">初始化MySql（安装）</a></li>
<li><a href="#%E5%AE%89%E8%A3%85mysql%E6%9C%8D%E5%8A%A1">安装MySql服务</a></li>
<li><a href="#%E5%90%AF%E5%8A%A8mysql%E6%9C%8D%E5%8A%A1">启动MySql服务</a></li>
</ul>
</li>
<li><a href="#%E4%BA%8C%E7%99%BB%E5%BD%95%E5%92%8C%E4%BD%BF%E7%94%A8">二、登录和使用</a><ul>
<li><a href="#%E7%99%BB%E5%BD%95%E5%B9%B6%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81">登录并修改密码</a></li>
<li><a href="#%E9%85%8D%E7%BD%AE%E5%85%81%E8%AE%B8%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE">配置允许远程访问</a></li>
</ul>
</li>
</ul>
<!-- /TOC -->

<h3 id="一、下载及安装"><a href="#一、下载及安装" class="headerlink" title="一、下载及安装"></a>一、下载及安装</h3><h4 id="下载mysql8-0-19"><a href="#下载mysql8-0-19" class="headerlink" title="下载mysql8.0.19"></a>下载mysql8.0.19</h4><p><a href="https://dev.mysql.com/downloads/mysql/">官网下载地址</a>,下载完成后解压到想要安装的目录下。<br>注意mysql安装包和安装后是同一个文件夹，所以下载安装包的位置一定要提前选好。</p>
<h4 id="配置初始化文件-my-ini"><a href="#配置初始化文件-my-ini" class="headerlink" title="配置初始化文件 my.ini"></a>配置初始化文件 my.ini</h4><p>在mysql根目录创建my.ini文件，并写入以下内容</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line">[<span class="string">mysqld</span>]</span><br><span class="line"><span class="comment"># 设置3306端口</span></span><br><span class="line"><span class="string">port=3306</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录 !注意安装的目录就是安装包的目录，不一样会报错</span></span><br><span class="line"><span class="string">basedir=D:\\mysql-8.0.19-winx64</span></span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录 !data的目录可以任意选择，注意8.0.19版本不需要手动创建data文件夹</span></span><br><span class="line"><span class="string">datadir=E:\\project\\FAS4\\data</span></span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="string">max_connections=200</span></span><br><span class="line"><span class="comment"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span></span><br><span class="line"><span class="string">max_connect_errors=10</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为UTF8</span></span><br><span class="line"><span class="string">character-set-server=utf8mb4</span></span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="string">default-storage-engine=INNODB</span></span><br><span class="line"><span class="comment"># 默认使用“mysql_native_password”插件认证</span></span><br><span class="line"><span class="comment">#mysql_native_password</span></span><br><span class="line"><span class="string">default_authentication_plugin=mysql_native_password</span></span><br><span class="line">[<span class="string">mysql</span>]</span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="string">default-character-set=utf8mb4</span></span><br><span class="line">[<span class="string">client</span>]</span><br><span class="line"><span class="comment"># 设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class="line"><span class="string">port=3306</span></span><br><span class="line"><span class="string">default-character-set=utf8</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：网上有些教程会让手动创建data文件夹，但是发现8.0.19手动创建后会安装会报错,但之前的版本不创建data文件夹也会报错，至于是否需要创建，可以安装一下看报错信息，写的很清楚<br><img src="http://qiniu.bigdudu.cn/20210722110935.png" alt="data文件夹报错"></p>
</blockquote>
<h4 id="初始化MySql（安装）"><a href="#初始化MySql（安装）" class="headerlink" title="初始化MySql（安装）"></a>初始化MySql（安装）</h4><p>以管理员身份运行cmd，进入mysql的bin目录，执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld --initialize --console</span><br></pre></td></tr></table></figure>
<p>安装过程中可能会报一些没有XXX.dll的错误，从网上下载并安装即可，直到出现如下提示，表示初始化成功，牢记红框内的密码，每个人的不一样。<br><img src="http://qiniu.bigdudu.cn/20210722111546.png" alt="安装成功"></p>
<h4 id="安装MySql服务"><a href="#安装MySql服务" class="headerlink" title="安装MySql服务"></a>安装MySql服务</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld --install [服务名]                     ###（服务名可以不加默认为mysql）</span><br></pre></td></tr></table></figure>
<h4 id="启动MySql服务"><a href="#启动MySql服务" class="headerlink" title="启动MySql服务"></a>启动MySql服务</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure>

<h3 id="二、登录和使用"><a href="#二、登录和使用" class="headerlink" title="二、登录和使用"></a>二、登录和使用</h3><h4 id="登录并修改密码"><a href="#登录并修改密码" class="headerlink" title="登录并修改密码"></a>登录并修改密码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">#输入密码 ，进入mysql</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;新密码&#x27;;</span><br><span class="line">exit;（退出mysql）</span><br></pre></td></tr></table></figure>

<h4 id="配置允许远程访问"><a href="#配置允许远程访问" class="headerlink" title="配置允许远程访问"></a>配置允许远程访问</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update <span class="keyword">user</span> <span class="keyword">set</span> host<span class="operator">=</span><span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span> <span class="operator">=</span> <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>研发日志</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>15.Windows用bat文件开启和关闭java程序</title>
    <url>/2021/08/10/15.Windows%E7%94%A8bat%E6%96%87%E4%BB%B6%E5%BC%80%E5%90%AF%E5%92%8C%E5%85%B3%E9%97%ADjava%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<blockquote>
<p>startup.bat</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">C:</span><br><span class="line">cd C:\Users\Administrator\Downloads\testt</span><br><span class="line">start &quot;haiot-fas4&quot; java -jar fas4.0.jar</span><br></pre></td></tr></table></figure>

<blockquote>
<p>shutdown.bat</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">taskkill /f /t /fi &quot;windowtitle eq haiot-fas4&quot;</span><br></pre></td></tr></table></figure>




<blockquote>
<p>综合示例</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd E:\Project\devicemanage-cluster\oauth-service</span><br><span class="line">E:</span><br><span class="line">copy &quot;%JAVA_HOME%\bin\javaw.exe&quot; &quot;%JAVA_HOME%\bin\cloud-oauth-service.exe&quot;</span><br><span class="line">title oauth-service-6019</span><br><span class="line">start cloud-oauth-service -Xms64m -Xmx128m -jar oauth-service.jar</span><br></pre></td></tr></table></figure>

<p>参数解析：  </p>
<ol>
<li><p>copy “%JAVA_HOME%\bin\javaw.exe” “%JAVA_HOME%\bin\cloud-oauth-service.exe”<br>复制一份运行程序，可将进程名修改为cloud-oauth-service</p>
</li>
<li><p>javaw.exe 后台启动程序</p>
</li>
<li><p>start 后台运行cmd，不显示小黑框</p>
</li>
<li><p>title oauth-service-6019 cmd小黑框的标题，用于小黑框没关闭时排错</p>
</li>
<li><p>-Xms64m  Java Heap初始值</p>
</li>
<li><p>-Xmx128m Java Heap最大值（限制内存占用过高问题）</p>
</li>
</ol>
]]></content>
      <categories>
        <category>研发日志</category>
      </categories>
      <tags>
        <tag>cmd</tag>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title>15.FastJson简单使用</title>
    <url>/2021/09/08/16.FastJson%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<ol>
<li><p>实体类或集合转JSON串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String besnString = JSONObject.toJSONString(实体类);</span><br></pre></td></tr></table></figure></li>
<li><p>JSON串转JSONObject</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JSONObject jsonObject = JSONObject.parseObject(jsonString);</span><br></pre></td></tr></table></figure></li>
<li><p>JSON串转实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">实体类 javaBean = JSON.parseObject(json, 实体类.class);</span><br></pre></td></tr></table></figure></li>
<li><p>JSON串转带泛型的List的集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;实体类或其他泛型&gt; list = JSON.parseObject(json, <span class="keyword">new</span> TypeReference&lt;List&lt;实体类或其他泛型&gt;&gt;()&#123;&#125;);</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>研发日志</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title>17.Lambda各种技巧总结-持续更新</title>
    <url>/2021/09/28/17.Lambda%E5%90%84%E7%A7%8D%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<ol>
<li><p>数组拼接字符串（sql in 条件）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.stream(combinQueryDeviceVo.getDeviceTag()).map(m-&gt;<span class="string">&quot;&#x27;&quot;</span>+m+<span class="string">&quot;&#x27;&quot;</span>).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>))</span><br></pre></td></tr></table></figure></li>
<li><p>取第一条</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">persons.flatMap(list -&gt; list.stream().findFirst()).map(Person::getAge).orElse(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>研发日志</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>19.SqlServer性能优化</title>
    <url>/2021/11/22/19.SqlServer%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<ol>
<li><p>sql执行情况统计</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> STATISTICS PROFILE <span class="keyword">ON</span> </span><br><span class="line"><span class="keyword">SET</span> STATISTICS IO <span class="keyword">ON</span> </span><br><span class="line"><span class="keyword">SET</span> STATISTICS <span class="type">TIME</span> <span class="keyword">ON</span> </span><br><span class="line">GO</span><br><span class="line"><span class="comment">/*--你的SQL脚本开始*/</span></span><br><span class="line"><span class="comment">/*你的SQL脚本结束*/</span></span><br><span class="line">GO <span class="keyword">SET</span> STATISTICS PROFILE OFF <span class="keyword">SET</span> STATISTICS IO OFF <span class="keyword">SET</span> STATISTICS <span class="type">TIME</span> OFF</span><br></pre></td></tr></table></figure></li>
<li><p>执行时间统计</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@d</span> datetime</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@d</span><span class="operator">=</span>getdate()</span><br><span class="line"><span class="comment">/*你的SQL脚本开始*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*你的SQL脚本结束*/</span></span><br><span class="line"><span class="keyword">select</span> [语句执行花费时间(毫秒)]<span class="operator">=</span>datediff(ms,<span class="variable">@d</span>,getdate())</span><br></pre></td></tr></table></figure></li>
<li><p>获取当前SQL服务器所有的连接详细信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　SELECT * FROM sysprocesses</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>研发日志</category>
      </categories>
      <tags>
        <tag>SqlServer</tag>
      </tags>
  </entry>
  <entry>
    <title>18.SpringBoot踩坑记录-持续更新</title>
    <url>/2021/10/22/18.SpringBoot%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<ol>
<li>mybatis多数据源问题</li>
<li><ol>
<li>第二数据源不进入<br>两个数据源都要配置，即使不用第一数据源，也要配置</li>
</ol>
</li>
<li><ol start="2">
<li>第二数据源不生效问题<br>第二数据源的事务注解要指定value，否则不生效<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Transactional(value=&quot;dmcloud_oauthTransactionManager&quot;,rollbackFor = Exception.class)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>研发日志</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>西北望，射天狼！</title>
    <url>/2021/05/13/2.%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<p>一个为生活奔波劳碌的年轻人<br>也是一个快要被时代抛弃的老年程序猿<br><br/><br>年少轻狂时，总觉得人这一辈子，总要为世界留下点什么，证明自己来过。<br>后来却发现自己不过是一片尘。<br>曾想过通过小说的途径，留下一个名。<br>奈何才疏学浅，三月憋出三个字。<br><br/><br>为了生计，陷入了上班-好累-休息-上班的无限循环中<br>几乎忘了自己应该干什么<br><br/><br>最近有被身边那些优秀的年轻人刺激到<br>恍然想起自己年轻时也曾有过理想<br><br/><br>“老夫聊发少年狂”<br>又想写点什么了<br>所幸就从自己擅长的领域出发<br>先写写技术博客<br>写写开源组件<br>为后来者提供些许方便</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>20.SqlServer多条件查询性能测试</title>
    <url>/2021/12/16/20.SqlServer%E5%A4%9A%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>最近刷博客，听说union all的性能远高于or，正好又遇上又类似业务要做，索性就做了一个比较，因为是正式项目，所以没有模拟很大的数据量，直接用生产数据测试的。</p>
<p>数据总量为5483，从中筛选出需要的1051条数据。</p>
<ol>
<li><p>表结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[Device] (</span><br><span class="line">  [uuid] <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> Chinese_PRC_CI_AS  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  [device_type_uuid] <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> Chinese_PRC_CI_AS <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">NULL</span>,</span><br><span class="line">  [product_uuid] <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> Chinese_PRC_CI_AS <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">NULL</span>,</span><br><span class="line">  [project_uuid] <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> Chinese_PRC_CI_AS <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">NULL</span>,</span><br><span class="line">  [company_uuid] <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> Chinese_PRC_CI_AS <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">NULL</span>,</span><br><span class="line">  [device_code] <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> Chinese_PRC_CI_AS <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">NULL</span>,</span><br><span class="line">  [imei] <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">COLLATE</span> Chinese_PRC_CI_AS <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">NULL</span>,</span><br><span class="line">  [iccard_code] <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">COLLATE</span> Chinese_PRC_CI_AS <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">NULL</span>,</span><br><span class="line">  [device_name] <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">COLLATE</span> Chinese_PRC_CI_AS <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">NULL</span>,</span><br><span class="line">  [device_status] <span class="type">int</span> <span class="keyword">DEFAULT</span> ((<span class="number">0</span>)) <span class="keyword">NULL</span>,</span><br><span class="line">  [telecom_status] <span class="type">int</span> <span class="keyword">DEFAULT</span> ((<span class="number">0</span>)) <span class="keyword">NULL</span>,</span><br><span class="line">  [fix_place] <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">COLLATE</span> Chinese_PRC_CI_AS <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">NULL</span>,</span><br><span class="line">  [remark] <span class="type">varchar</span>(max) <span class="keyword">COLLATE</span> Chinese_PRC_CI_AS <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">NULL</span>,</span><br><span class="line">  [insert_date] datetime <span class="keyword">DEFAULT</span> (getdate()) <span class="keyword">NULL</span>,</span><br><span class="line">  [third_platform] <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> Chinese_PRC_CI_AS  <span class="keyword">NULL</span>,</span><br><span class="line">  [third_device_id] <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> Chinese_PRC_CI_AS  <span class="keyword">NULL</span>,</span><br><span class="line">  [telecom_time] datetime  <span class="keyword">NULL</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li><p>or查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@d</span> datetime</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@d</span><span class="operator">=</span>getdate()</span><br><span class="line"><span class="comment">/*你的SQL脚本开始*/</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Device <span class="keyword">where</span> product_uuid<span class="operator">=</span><span class="string">&#x27;tuopu-temperature-hunidity&#x27;</span> <span class="keyword">or</span> product_uuid <span class="operator">=</span> <span class="string">&#x27;tuopu-outdoor-bolt&#x27;</span> <span class="keyword">or</span> product_uuid <span class="operator">=</span> <span class="string">&#x27;tuopu-water-level&#x27;</span> <span class="keyword">or</span> product_uuid <span class="operator">=</span> <span class="string">&#x27;tuopu-water-pressure&#x27;</span></span><br><span class="line"><span class="comment">/*你的SQL脚本结束*/</span></span><br><span class="line"><span class="keyword">select</span> [语句<span class="keyword">or</span>执行花费时间(毫秒)]<span class="operator">=</span>datediff(ms,<span class="variable">@d</span>,getdate())</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>like查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@d</span> datetime</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@d</span><span class="operator">=</span>getdate()</span><br><span class="line"><span class="comment">/*你的SQL脚本开始*/</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Device <span class="keyword">where</span> product_uuid <span class="keyword">like</span> <span class="string">&#x27;tuopu%&#x27;</span></span><br><span class="line"><span class="comment">/*你的SQL脚本结束*/</span></span><br><span class="line"><span class="keyword">select</span> [语句<span class="keyword">like</span>执行花费时间(毫秒)]<span class="operator">=</span>datediff(ms,<span class="variable">@d</span>,getdate())</span><br></pre></td></tr></table></figure></li>
<li><p>in查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@d</span> datetime</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@d</span><span class="operator">=</span>getdate()</span><br><span class="line"><span class="comment">/*你的SQL脚本开始*/</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Device <span class="keyword">where</span> product_uuid <span class="keyword">in</span> (<span class="string">&#x27;tuopu-temperature-hunidity&#x27;</span>,<span class="string">&#x27;tuopu-outdoor-bolt&#x27;</span>,<span class="string">&#x27;tuopu-water-level&#x27;</span>,<span class="string">&#x27;tuopu-water-pressure&#x27;</span>) </span><br><span class="line"><span class="comment">/*你的SQL脚本结束*/</span></span><br><span class="line"><span class="keyword">select</span> [语句<span class="keyword">in</span>执行花费时间(毫秒)]<span class="operator">=</span>datediff(ms,<span class="variable">@d</span>,getdate())</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>union查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@d</span> datetime</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@d</span><span class="operator">=</span>getdate()</span><br><span class="line"><span class="comment">/*你的SQL脚本开始*/</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Device <span class="keyword">where</span> product_uuid<span class="operator">=</span><span class="string">&#x27;tuopu-temperature-hunidity&#x27;</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Device <span class="keyword">where</span> product_uuid<span class="operator">=</span><span class="string">&#x27;tuopu-outdoor-bolt&#x27;</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Device <span class="keyword">where</span> product_uuid<span class="operator">=</span><span class="string">&#x27;tuopu-water-level&#x27;</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Device <span class="keyword">where</span> product_uuid<span class="operator">=</span><span class="string">&#x27;tuopu-water-pressure&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*你的SQL脚本结束*/</span></span><br><span class="line"><span class="keyword">select</span> [语句<span class="keyword">union</span>执行花费时间(毫秒)]<span class="operator">=</span>datediff(ms,<span class="variable">@d</span>,getdate())</span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="6">
<li>测试结果</li>
</ol>
<p><img src="http://qiniu.bigdudu.cn/20211216102042.png" alt="测试结果"></p>
]]></content>
      <categories>
        <category>研发日志</category>
      </categories>
      <tags>
        <tag>SqlServer</tag>
      </tags>
  </entry>
  <entry>
    <title>22.修改java编译后的class文件</title>
    <url>/2021/12/16/21.%E4%BF%AE%E6%94%B9java%E7%BC%96%E8%AF%91%E5%90%8E%E7%9A%84class%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>修改java编译后的class文件，有两种方式，第一种通过修改字节码来实现，此方法灵活性低，且操作起来相对复杂，但已经可以解决大多数问题。<br>第二种方法类似.net emit，通过反射的方式修改源代码，需要用到javassist</p>
<h2 id="一、-字节码方式"><a href="#一、-字节码方式" class="headerlink" title="一、 字节码方式"></a>一、 字节码方式</h2><ol>
<li><p>先下载工具包<a href="http://qiniu.bigdudu.cn/bdbd9ca3.jar">bdbd9ca3.jar</a> 并引用到项目中</p>
</li>
<li><p>idea 安装jclasslib ，查看字节码，找到要改的代码的行号</p>
</li>
<li><p>实现源码如下</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haiot.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> org.gjt.jclasslib.io.ClassFileWriter;</span><br><span class="line"><span class="keyword">import</span> org.gjt.jclasslib.structures.CPInfo;</span><br><span class="line"><span class="keyword">import</span> org.gjt.jclasslib.structures.ClassFile;</span><br><span class="line"><span class="keyword">import</span> org.gjt.jclasslib.structures.constants.ConstantUtf8Info;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String filePath = <span class="string">&quot;C:\\Users\\Administrator\\Documents\\WeChat &quot;</span> +</span><br><span class="line">                <span class="string">&quot;Files\\yanghuichao19930109\\FileStorage\\File\\2020-12\\ThirdPartServiceImpl.class&quot;</span>;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(filePath);</span><br><span class="line"></span><br><span class="line">        DataInput di = <span class="keyword">new</span> DataInputStream(fis);</span><br><span class="line">        ClassFile cf = <span class="keyword">new</span> ClassFile();</span><br><span class="line">        cf.read(di);</span><br><span class="line">        CPInfo[] infos = cf.getConstantPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = infos.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (infos[i] != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.print(i);</span><br><span class="line">                System.out.print(<span class="string">&quot; = &quot;</span>);</span><br><span class="line">                System.out.print(infos[i].getVerbose());</span><br><span class="line">                System.out.print(<span class="string">&quot; = &quot;</span>);</span><br><span class="line">                System.out.println(infos[i].getTagVerbose());</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">413</span>)&#123;</span><br><span class="line">                    ConstantUtf8Info uInfo = (ConstantUtf8Info)infos[i];</span><br><span class="line">                    uInfo.setBytes(<span class="string">&quot; 要修改的内容 &quot;</span>.getBytes());</span><br><span class="line">                    infos[i]=uInfo;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cf.setConstantPool(infos);</span><br><span class="line">        fis.close();</span><br><span class="line">        File f = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        ClassFileWriter.writeToFile(f, cf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="二、javassist（推荐）"><a href="#二、javassist（推荐）" class="headerlink" title="二、javassist（推荐）"></a>二、javassist（推荐）</h2><ol>
<li><p>maven引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改已经编译好的java代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.25.0-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>获取要修改的class</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得ClassPool对象</span></span><br><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line"><span class="comment">//指定文件路径</span></span><br><span class="line">pool.insertClassPath( <span class="string">&quot;E:\\test&quot;</span> );</span><br><span class="line"><span class="comment">//获取class</span></span><br><span class="line">CtClass ctClass = pool.get(<span class="string">&quot;com.haiot.eas.common.utils.ClassName&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>此方法网上很多人都说可以，但是我测试的时候始终取不到class。<br>查看pool.get()方法，发现并没有使用classPath的地方，而是直接从默认路径中查找的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> CtClass <span class="title">get</span><span class="params">(String classname)</span> <span class="keyword">throws</span> NotFoundException </span>&#123;</span><br><span class="line">    CtClass clazz;</span><br><span class="line">    <span class="keyword">if</span> (classname == <span class="keyword">null</span>) &#123;</span><br><span class="line">        clazz = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        clazz = <span class="keyword">this</span>.get0(classname, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotFoundException(classname);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        clazz.incGetCounter();</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> CtClass <span class="title">get0</span><span class="params">(String classname, <span class="keyword">boolean</span> useCache)</span> <span class="keyword">throws</span> NotFoundException </span>&#123;</span><br><span class="line">    CtClass clazz = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (useCache) &#123;</span><br><span class="line">        clazz = <span class="keyword">this</span>.getCached(classname);</span><br><span class="line">        <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.childFirstLookup &amp;&amp; <span class="keyword">this</span>.parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">        clazz = <span class="keyword">this</span>.parent.get0(classname, useCache);</span><br><span class="line">        <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clazz = <span class="keyword">this</span>.createCtClass(classname, useCache);</span><br><span class="line">    <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (useCache) &#123;</span><br><span class="line">            <span class="keyword">this</span>.cacheCtClass(clazz.getName(), clazz, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.childFirstLookup &amp;&amp; <span class="keyword">this</span>.parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">            clazz = <span class="keyword">this</span>.parent.get0(classname, useCache);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> CtClass <span class="title">getCached</span><span class="params">(String classname)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (CtClass)<span class="keyword">this</span>.classes.get(classname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>于是直接将要修改的文件复制到当前项目的target文件夹中，目录与被修改的class包名一致<br><img src="http://qiniu.bigdudu.cn/20211216150137.png" alt="aa"></p>
<ol start="3">
<li>完整代码如下</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fb208.jcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteCode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获得ClassPool对象</span></span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        <span class="comment">//获取class</span></span><br><span class="line">        CtClass ctClass = pool.get(<span class="string">&quot;com.haiot.eas.common.utils.ClassName&quot;</span>);</span><br><span class="line">        <span class="comment">//获取方法</span></span><br><span class="line">        CtMethod cm = ctClass.getDeclaredMethod( <span class="string">&quot;MethodName&quot;</span>);</span><br><span class="line">        <span class="comment">//修改方法体</span></span><br><span class="line">        cm.setBody(<span class="string">&quot;return true;&quot;</span>);</span><br><span class="line">        <span class="comment">//输出到指定路径</span></span><br><span class="line">        ctClass.writeFile(<span class="string">&quot;D:\\test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>更详细的使用方法参考<a href="https://www.cnblogs.com/rickiyang/p/11336268.html">javassist使用全解析</a></p>
</blockquote>
]]></content>
      <categories>
        <category>研发日志</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>编译</tag>
        <tag>字节码</tag>
        <tag>javassist</tag>
      </tags>
  </entry>
  <entry>
    <title>22.mongo分片+副本集实现水平扩展的高可用服务</title>
    <url>/2022/01/01/22.mongo%E5%88%86%E7%89%87+%E5%89%AF%E6%9C%AC%E9%9B%86%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%B9%B3%E6%89%A9%E5%B1%95%E7%9A%84%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="一-环境踩坑"><a href="#一-环境踩坑" class="headerlink" title="一.环境踩坑"></a>一.环境踩坑</h3><p>服务器：阿里云windows server 2012<br>mongo：4.2.18-rc0</p>
<p>mongo官网：<a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p>
<p>mongo官网上已经发布了5.0.5，本来想试试5.X的最新版，下载了zip免安装版。但是在运行的时候先提示缺少各种DLL，在补齐DLL后又开始报找“无法定位程序输入点”。</p>
<p>因为之前都是用msi安装的，第一次用zip，以为是自己不会配置，研究了一整天，后来放弃，直接使用msi版本安装，结果直接提示系统版本不支持！！！</p>
<p><img src="http://qiniu.bigdudu.cn/20211231085726.png"></p>
<p>最终我也没有找到一个比较官方的环境支持的文档，解决方案是，逐个下载msi文件，测试当前系统支持的最新版本，然后再下载zip包。</p>
<h3 id="二、服务器架构"><a href="#二、服务器架构" class="headerlink" title="二、服务器架构"></a>二、服务器架构</h3><p><img src="http://qiniu.bigdudu.cn/20211231172939.png"></p>
<table>
<thead>
<tr>
<th>服务器1</th>
<th>服务器2</th>
<th>服务器3</th>
<th>端口</th>
</tr>
</thead>
<tbody><tr>
<td>mongos</td>
<td>mongos</td>
<td>mongos</td>
<td>20000</td>
</tr>
<tr>
<td>config</td>
<td>config</td>
<td>config</td>
<td>21000</td>
</tr>
<tr>
<td>shard1</td>
<td>shard1</td>
<td>shard1(仲裁)</td>
<td>21001</td>
</tr>
<tr>
<td>shard2</td>
<td>shard2</td>
<td>shard2(仲裁)</td>
<td>21002</td>
</tr>
</tbody></table>
<blockquote>
<p>共需要3台服务器，共启动3*4=12个服务<br>  服务启动顺序：config-&gt;shard1-&gt;shard2-&gt;mongos</p>
</blockquote>
<p>在每台服务器上按如下，创建文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\MongoDB\conf  //配置文件</span><br><span class="line">D:\MongoDB\config\data  //config服务</span><br><span class="line">D:\MongoDB\config\log</span><br><span class="line">D:\MongoDB\mongos\log</span><br><span class="line">D:\MongoDB\shard1\data</span><br><span class="line">D:\MongoDB\shard1\log</span><br><span class="line">D:\MongoDB\shard2\data</span><br><span class="line">D:\MongoDB\shard2\log</span><br><span class="line">D:\MongoDB\mongodb  //mongo主程序</span><br></pre></td></tr></table></figure>

<h3 id="三、配置、启动、初始化"><a href="#三、配置、启动、初始化" class="headerlink" title="三、配置、启动、初始化"></a>三、配置、启动、初始化</h3><p>1.config服务</p>
<p>三台服务器都要配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">net:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">21000</span></span><br><span class="line">  <span class="attr">bindIp:</span> <span class="string">*</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">dbPath:</span> <span class="string">D:\MongoDB\config\data</span></span><br><span class="line">  <span class="attr">journal:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">directoryPerDB:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">engine:</span> <span class="string">wiredTiger</span></span><br><span class="line">  <span class="attr">wiredTiger:</span></span><br><span class="line">    <span class="attr">engineConfig:</span></span><br><span class="line">      <span class="attr">cacheSizeGB:</span> <span class="number">0.2</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">  <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">  <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">D:\MongoDB\config\log\configsrv.log</span></span><br><span class="line"></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">  <span class="attr">pidFilePath:</span> <span class="string">D:\MongoDB\config\log\configsrv.pid</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sharding:</span></span><br><span class="line">  <span class="attr">clusterRole:</span> <span class="string">configsvr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#副本集名称</span></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line">  <span class="attr">replSetName:</span> <span class="string">config</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>启动三台服务器的configserver</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongod --config &quot;D:\MongoDB\conf\config.conf&quot;</span><br></pre></td></tr></table></figure>

<p>登录任意一台配置服务器，初始化配置副本集</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#无密码登录</span></span><br><span class="line"><span class="string">mongo</span> <span class="number">172.26</span><span class="number">.205</span><span class="number">.132</span><span class="string">:21000</span></span><br><span class="line"></span><br><span class="line"><span class="string">config</span> <span class="string">=</span> &#123;</span><br><span class="line">   <span class="attr">_id :</span> <span class="string">&quot;config&quot;</span>,</span><br><span class="line">     <span class="attr">members :</span> [</span><br><span class="line">         &#123;<span class="attr">_id :</span> <span class="number">0</span>, <span class="attr">host :</span> <span class="string">&quot;172.26.205.132:21000&quot;</span> &#125;,</span><br><span class="line">         &#123;<span class="attr">_id :</span> <span class="number">1</span>, <span class="attr">host :</span> <span class="string">&quot;172.26.205.130:21000&quot;</span> &#125;,</span><br><span class="line">         &#123;<span class="attr">_id :</span> <span class="number">2</span>, <span class="attr">host :</span> <span class="string">&quot;172.26.205.129:21000&quot;</span> &#125;</span><br><span class="line">     ]</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化副本集</span></span><br><span class="line"><span class="string">rs.initiate(config)</span></span><br></pre></td></tr></table></figure>
<p>其中，”_id” : “config”应与配置文件中配置的 replicaction.replSetName 一致，”members” 中的 “host” 为三个节点的 ip 和 port</p>
<p>查询配置及集群状态</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">rs.status()</span></span><br></pre></td></tr></table></figure>


<p>2.shard 分片副本集<br>三台服务器都要配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">net:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">21001</span></span><br><span class="line">  <span class="attr">bindIp:</span> <span class="string">*</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">dbPath:</span> <span class="string">D:\MongoDB\shard1\data</span></span><br><span class="line">  <span class="attr">journal:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">directoryPerDB:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">engine:</span> <span class="string">wiredTiger</span></span><br><span class="line">  <span class="attr">wiredTiger:</span></span><br><span class="line">    <span class="attr">engineConfig:</span></span><br><span class="line">      <span class="attr">cacheSizeGB:</span> <span class="number">1</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">  <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">  <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">D:\MongoDB\shard1\log\shard1.log</span></span><br><span class="line"></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">  <span class="attr">pidFilePath:</span> <span class="string">D:\MongoDB\shard1\log\shard1.pid</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sharding:</span></span><br><span class="line">  <span class="attr">clusterRole:</span> <span class="string">shardsvr</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#副本集名称</span></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line">  <span class="attr">replSetName:</span> <span class="string">shard1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动三台服务器的shard1 server</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongod --config &quot;D:\MongoDB\conf\shard1.conf&quot;</span><br></pre></td></tr></table></figure>
<p>登录任意一台配置服务器，初始化shard1副本集</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#无密码登录</span></span><br><span class="line"><span class="string">mongo</span> <span class="number">172.26</span><span class="number">.205</span><span class="number">.132</span><span class="string">:21001</span></span><br><span class="line"><span class="comment">#使用admin数据库</span></span><br><span class="line"><span class="string">use</span> <span class="string">admin</span></span><br><span class="line"><span class="comment">#定义副本集配置，第三个节点的 &quot;arbiterOnly&quot;:true 代表其为仲裁节点。</span></span><br><span class="line"><span class="string">config</span> <span class="string">=</span> &#123;</span><br><span class="line">   <span class="attr">_id :</span> <span class="string">&quot;shard1&quot;</span>,</span><br><span class="line">     <span class="attr">members :</span> [</span><br><span class="line">         &#123;<span class="attr">_id :</span> <span class="number">0</span>, <span class="attr">host :</span> <span class="string">&quot;172.26.205.132:21001&quot;</span> &#125;,</span><br><span class="line">         &#123;<span class="attr">_id :</span> <span class="number">1</span>, <span class="attr">host :</span> <span class="string">&quot;172.26.205.130:21001&quot;</span> &#125;,</span><br><span class="line">         &#123;<span class="attr">_id :</span> <span class="number">2</span>, <span class="attr">host :</span> <span class="string">&quot;172.26.205.129:21001&quot;</span>,<span class="attr">arbiterOnly:</span> <span class="literal">true</span> &#125;</span><br><span class="line">     ]</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">#初始化副本集配置</span></span><br><span class="line"><span class="string">rs.initiate(config);</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>多个副本集配置类似，不赘述，以上所有操作都要跑一遍</p>
</blockquote>
<p>3.配置路由服务器mongos</p>
<p>先启动配置服务器和分片服务器,后启动路由实例启动路由实例:（三台机器）</p>
<p>配置如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">net:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">20000</span></span><br><span class="line">  <span class="attr">bindIp:</span> <span class="number">172.26</span><span class="number">.205</span><span class="number">.132</span></span><br><span class="line">  </span><br><span class="line">      </span><br><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">  <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">  <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">D:\MongoDB\mongos\log\mongos.log</span></span><br><span class="line"></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">  <span class="attr">pidFilePath:</span> <span class="string">D:\MongoDB\mongos\log\mongos.pid</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sharding:</span></span><br><span class="line">  <span class="attr">configDB:</span> <span class="string">config/172.26.205.132:21000,172.26.205.130:21000,172.26.205.129:21000</span></span><br></pre></td></tr></table></figure>
<p>启动三台服务器的mongos server</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">mongod</span> <span class="string">--config</span> <span class="string">&quot;D:\MongoDB\conf\mongos.conf&quot;</span></span><br></pre></td></tr></table></figure>

<p>目前搭建了mongodb配置服务器、路由服务器，各个分片服务器，不过应用程序连接到mongos路由服务器并不能使用分片机制，还需要在程序里设置分片配置，让分片生效。</p>
<p>登陆任意一台mongos</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">mongo</span> <span class="string">mongo</span> <span class="number">172.26</span><span class="number">.205</span><span class="number">.132</span><span class="string">:20000</span></span><br><span class="line"><span class="comment">#使用admin数据库</span></span><br><span class="line"><span class="string">use</span>  <span class="string">admin</span></span><br><span class="line"><span class="comment">#串联路由服务器与分配副本集</span></span><br><span class="line"><span class="string">sh.addShard(&quot;shard1/172.26.205.132:21001,172.26.205.130:21001,172.26.205.129:21001&quot;)</span></span><br><span class="line"><span class="string">sh.addShard(&quot;shard2/172.26.205.132:21002,172.26.205.130:21002,172.26.205.129:21003&quot;)</span></span><br><span class="line"><span class="string">sh.addShard(&quot;shard3/172.26.205.132:21003,172.26.205.130:21003,172.26.205.129:21003&quot;)</span></span><br><span class="line"><span class="comment">#查看集群状态</span></span><br><span class="line"><span class="string">sh.status()</span></span><br></pre></td></tr></table></figure>

<h3 id="四、启用分片"><a href="#四、启用分片" class="headerlink" title="四、启用分片"></a>四、启用分片</h3><p>目前配置服务、路由服务、分片服务、副本集服务都已经串联起来了，但是新建的数据集，默认是不启用分片的。</p>
<p>1.查看数据库分片状态</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建数据库</span></span><br><span class="line"><span class="string">use</span> <span class="string">test1</span></span><br><span class="line"><span class="comment"># 创建集合</span></span><br><span class="line"><span class="string">db.createCollection(&quot;coll1&quot;)</span></span><br><span class="line"><span class="comment"># 随便插入一条数据</span></span><br><span class="line"><span class="string">db.coll1.insert(&#123;&quot;name&quot;:&quot;testdata&quot;&#125;)</span></span><br><span class="line"><span class="comment"># 查看是否启用分片</span></span><br><span class="line"><span class="string">db.coll1.stats().sharded</span></span><br><span class="line"><span class="string">&gt;</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#启用分片</span></span><br><span class="line"><span class="string">sh.enableSharding(&quot;test1&quot;)</span></span><br><span class="line"><span class="string">sh.shardCollection(&quot;test1.coll1&quot;,&#123;&quot;_id&quot;:1&#125;)</span></span><br><span class="line"><span class="comment"># 查看是否启用分片</span></span><br><span class="line"><span class="string">db.coll1.stats().sharded</span></span><br><span class="line"><span class="string">&gt;</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>至此，库test1的集合coll1已经启用分片</p>
<p>2.测试<br>不通过mongos，直接链接分片服务器</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接shard1</span></span><br><span class="line"><span class="string">mongo</span> <span class="number">172.26</span><span class="number">.205</span><span class="number">.132</span><span class="string">:21001</span></span><br><span class="line"><span class="string">use</span> <span class="string">test1</span></span><br><span class="line"><span class="string">db.coll1.find().count()</span></span><br><span class="line"><span class="string">&gt;</span> <span class="number">1</span> <span class="comment"># 表示刚才插入的测试数据在shard1上</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接shard2</span></span><br><span class="line"><span class="string">mongo</span> <span class="number">172.26</span><span class="number">.205</span><span class="number">.132</span><span class="string">:21001</span></span><br><span class="line"><span class="string">use</span> <span class="string">test1</span></span><br><span class="line"><span class="string">db.coll1.find().count()</span></span><br><span class="line"><span class="string">&gt;</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>可测试插入大量数据后，mongo会自动将数据存储与不通的分片上。</p>
<h3 id="五、横向扩展"><a href="#五、横向扩展" class="headerlink" title="五、横向扩展"></a>五、横向扩展</h3><p>横向扩展目前没有做过测试，根据已知信息，参考【二、服务器架构】中的图片，将来若现有磁盘空间不足，可新增shard3，并将shard3指向其他磁盘。<br>有时间做个测试再补充这块内容。</p>
<h3 id="六、开启权限认证"><a href="#六、开启权限认证" class="headerlink" title="六、开启权限认证"></a>六、开启权限认证</h3><p>1.链接mongos，创建账号</p>
<p>注意一定要先创建账号，并记好密码，开启权限验证之后再创建账号很麻烦</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.createUser(&#123;user: &quot;admin&quot;,pwd: &quot;*&quot;,roles: [ &#123; role: &quot;root&quot;, db: &quot;admin&quot; &#125; ]&#125;) </span><br><span class="line">db.auth(&quot;admin&quot;,&quot;*&quot;)</span><br><span class="line"></span><br><span class="line">use config</span><br><span class="line">db.createUser(&#123;user: &quot;admin&quot;,pwd: &quot;*&quot;,roles: [ &#123; role: &quot;root&quot;, db: &quot;admin&quot; &#125; ]&#125;)</span><br><span class="line">db.auth(&quot;admin&quot;,&quot;*&quot;)</span><br></pre></td></tr></table></figure>
<p>2.先用openssl生成keyfile文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl rand -base64 756 &gt; keyfile.file</span><br></pre></td></tr></table></figure>

<p>3.将keyfile文件放到服务器指定位置(每台服务器都要放)<br>我把文件放在了D:\MongoDB\conf\keyfile.file，方便统一管理</p>
<p>4.修改配置文件<br>在所有config服务、shard服务的配置文件中加入</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启权限验证</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">keyFile:</span> <span class="string">D:\MongoDB\conf\keyfile.file</span></span><br><span class="line">  <span class="attr">authorization:</span> <span class="string">enabled</span></span><br></pre></td></tr></table></figure>
<p>在所有mongos服务的配置文件中加入</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启权限验证</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">keyFile:</span> <span class="string">D:\MongoDB\conf\keyfile.file</span></span><br></pre></td></tr></table></figure>
<p>解释：<br>  mongos比mongod少了authorization：enabled的配置。原因是，副本集加分片的安全认证需要配置两方面的，副本集各个节点之间使用内部身份验证，用于内部各个mongo实例的通信，只有相同keyfile才能相互访问。所以都要开启keyFile: D:\MongoDB\conf\keyfile.file</p>
<p>  然而对于所有的mongod，才是真正的保存数据的分片。mongos只做路由，不保存数据。所以所有的mongod开启访问数据的授权authorization:enabled。这样用户只有账号密码正确才能访问到数据</p>
<p>5.关闭所有服务<br>6.按照config、shard、mongso的顺序重启所有服务</p>
<h3 id="七、自启动服务"><a href="#七、自启动服务" class="headerlink" title="七、自启动服务"></a>七、自启动服务</h3><p>windows系统，可将mongo配置为服务，开机自启动，配置脚本如下</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">D:</span><br><span class="line"><span class="keyword">cd</span> D:\MongoDB\mongodb\bin</span><br><span class="line">mongod --install --serviceName <span class="string">&quot;MongoDBConfig&quot;</span> --serviceDisplayName <span class="string">&quot;MongoDBConfig&quot;</span> --config <span class="string">&quot;D:\MongoDB\conf\config.conf&quot;</span></span><br><span class="line">mongod --install --serviceName <span class="string">&quot;MongoDBShard1&quot;</span> --serviceDisplayName <span class="string">&quot;MongoDBShard1&quot;</span> --config <span class="string">&quot;D:\MongoDB\conf\shard1.conf&quot;</span></span><br><span class="line">mongod --install --serviceName <span class="string">&quot;MongoDBShard2&quot;</span> --serviceDisplayName <span class="string">&quot;MongoDBShard2&quot;</span> --config <span class="string">&quot;D:\MongoDB\conf\shard2.conf&quot;</span></span><br><span class="line">mongos --install --serviceName <span class="string">&quot;Mongos&quot;</span> --serviceDisplayName <span class="string">&quot;Mongos&quot;</span> --config <span class="string">&quot;D:\MongoDB\conf\mongos.conf&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>手动启动服务脚本：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">net start <span class="string">&quot;MongoDBConfig&quot;</span></span><br><span class="line">net start <span class="string">&quot;MongoDBShard1&quot;</span></span><br><span class="line">net start <span class="string">&quot;MongoDBShard2&quot;</span></span><br><span class="line">net start <span class="string">&quot;Mongos&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意，手动启动服务的脚本仅供代码参考，启动顺序必须是：先启动每台服务器的config，在启动每台服务器的shard，最后启动每台服务器的mongos。<br>否则，在启动所有config之前启动shard，会导致启动失败。<br>不过配置成系统服务之后，不满足启动条件服务会进入等待状态，等所有的config都起来后，shard也会跟着启动，也不影响使用，但是仍然不推荐这种做法。</p>
</blockquote>
<h3 id="八、集群状态监测"><a href="#八、集群状态监测" class="headerlink" title="八、集群状态监测"></a>八、集群状态监测</h3><p>不会！</p>
<h3 id="九、参考及引用"><a href="#九、参考及引用" class="headerlink" title="九、参考及引用"></a>九、参考及引用</h3><p><a href="https://zhuanlan.zhihu.com/p/28600032">mongodb 3.4 集群搭建：分片+副本集</a></p>
<p><a href="https://www.cnblogs.com/jpfss/p/11247703.html">Windows安装MongoDB .zip绿色版</a></p>
<p><a href="https://www.cnblogs.com/DBABlog/p/12926903.html">MongoDB对集合开启分片功能</a></p>
<p><a href="https://www.cnblogs.com/JJY-/articles/13278780.html">mongodb设置集群密码和集群认证</a></p>
<p><a href="https://blog.csdn.net/uncle_david/article/details/78713551">mongodb副本集加分片集群安全认证使用账号密码登录</a></p>
<p><a href="https://blog.csdn.net/m0_37867491/article/details/87883947">MongoDB 4.0 角色(roles)详解</a></p>
]]></content>
      <categories>
        <category>研发日志</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
        <tag>副本集</tag>
        <tag>分片</tag>
        <tag>集群</tag>
      </tags>
  </entry>
  <entry>
    <title>23.tomcat与nginx配置</title>
    <url>/2022/01/13/23.tomcat%E4%B8%8Enginx%E9%85%8D%E7%BD%AE-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<h3 id="一-发布前端-VUE-项目，启用gzip压缩"><a href="#一-发布前端-VUE-项目，启用gzip压缩" class="headerlink" title="一.发布前端(VUE)项目，启用gzip压缩"></a>一.发布前端(VUE)项目，启用gzip压缩</h3><ol>
<li><p>tomcat<br>修改server.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>改成<br> &lt;Connector port=”8080” protocol=”HTTP/1.1”</p>
<pre><code>        connectionTimeout=&quot;20000&quot;
        redirectPort=&quot;8443&quot; compression=&quot;on&quot; compressionMinSize=&quot;2048&quot;   
        noCompressionUserAgents=&quot;gozilla, traviata&quot; compressableMimeType=&quot;text/html,text/xml,application/javascript,text/css,text/plain,text/json&quot; useSendfile = &quot;false&quot;
</code></pre>
<p>/&gt;</p>
</li>
<li><p>nginx<br>修改nginx.conf，添加如下配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开启gzip</span><br><span class="line">gzip on;</span><br><span class="line"># 启用gzip压缩的最小文件；小于设置值的文件将不会被压缩</span><br><span class="line">gzip_min_length 1k;</span><br><span class="line"># gzip 压缩级别 1-10 </span><br><span class="line">gzip_comp_level 2;</span><br><span class="line"># 进行压缩的文件类型。</span><br><span class="line">gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line"></span><br><span class="line"># 是否在http header中添加Vary: Accept-Encoding，建议开启</span><br><span class="line">gzip_vary on;</span><br><span class="line">include       mime.types;</span><br><span class="line">default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sendfile        on;</span><br><span class="line"></span><br><span class="line">keepalive_timeout  65;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>研发日志</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
        <tag>副本集</tag>
        <tag>分片</tag>
        <tag>集群</tag>
      </tags>
  </entry>
  <entry>
    <title>gitpages各种小问题</title>
    <url>/2021/05/16/3.gitpages%E5%90%84%E7%A7%8D%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="提交后gitpages提示发布失败"><a href="#提交后gitpages提示发布失败" class="headerlink" title="提交后gitpages提示发布失败"></a>提交后gitpages提示发布失败</h2><blockquote>
<p>Your site is having problems building: Unable to build page. Please try agai</p>
</blockquote>
<blockquote>
<p>解决方法：<br>可能是由于README.md格式与静态文件冲突，先删除README.md，让gitpages正常构建，然后再单独提交README.md即可</p>
</blockquote>
]]></content>
      <categories>
        <category>gitpages</category>
      </categories>
      <tags>
        <tag>gitpages</tag>
        <tag>问题汇总</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo推送到GitPages后自定义域名被重置</title>
    <url>/2021/05/14/4.Hexo%E6%8E%A8%E9%80%81%E5%88%B0GitPages%E5%90%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>source目录下创建CNAME文件(无后缀)，在文件内写入自定义域名，每次重新发布改域名会覆盖GitPages的自定义域名</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>说明</tag>
      </tags>
  </entry>
  <entry>
    <title>让高德地图仅显示某一区域</title>
    <url>/2021/05/17/5.%E8%AE%A9%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE%E4%BB%85%E6%98%BE%E7%A4%BA%E6%9F%90%E4%B8%80%E5%8C%BA%E5%9F%9F/</url>
    <content><![CDATA[<blockquote>
<p>高德地图自带掩摸功能可实现仅显示某一区域地图，可参考<a href="https://lbs.amap.com/demo/javascript-api/example/3d/mask">官方示例</a></p>
</blockquote>
<p>实现效果如下<br><img src="http://qiniu.bigdudu.cn/%E5%A4%A9%E6%B4%A5%E5%9C%B0%E5%9B%BE-%E9%AB%98%E5%BE%B7.png" alt="pic"></p>
<p>上图参考配置文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width initial-scale=1.0 maximum-scale=1.0 user-scalable=0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>区域掩模<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span>,<span class="selector-tag">html</span>,<span class="selector-id">#container</span>&#123; <span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">100%</span>&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://webapi.amap.com/maps?v=1.4.15&amp;key=您申请的key值&amp;plugin=Map3D,AMap.DistrictSearch&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> opts = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">subdistrict</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">extensions</span>: <span class="string">&#x27;all&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">level</span>: <span class="string">&#x27;city&#x27;</span></span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//利用行政区查询获取边界构建mask路径</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//也可以直接通过经纬度构建mask路径</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> district = <span class="keyword">new</span> AMap.DistrictSearch(opts);</span></span><br><span class="line"><span class="javascript">    district.search(<span class="string">&#x27;天津市&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">status, result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bounds = result.districtList[<span class="number">0</span>].boundaries;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> mask = []</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;bounds.length;i+=<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="javascript">            mask.push([bounds[i]])</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">&#x27;container&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">           <span class="attr">mapStyle</span>: <span class="string">&#x27;amap://styles/darkblue&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">mask</span>:mask,</span></span><br><span class="line"><span class="javascript">            <span class="attr">center</span>:[<span class="number">116.472804</span>,<span class="number">39.995725</span>],</span></span><br><span class="line"><span class="javascript">            <span class="attr">disableSocket</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">viewMode</span>:<span class="string">&#x27;3D&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">showLabel</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">labelzIndex</span>:<span class="number">130</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">pitch</span>:<span class="number">40</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">zoom</span>:<span class="number">9</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">layers</span>:[</span></span><br><span class="line"><span class="javascript">                <span class="keyword">new</span> AMap.TileLayer.RoadNet(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//rejectMapMask:true</span></span></span><br><span class="line"><span class="javascript">                &#125;),</span></span><br><span class="line"><span class="javascript">               <span class="comment">// new AMap.TileLayer.Satellite()</span></span></span><br><span class="line"><span class="javascript">            ]</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> maskerIn = <span class="keyword">new</span> AMap.Marker(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">position</span>:[<span class="number">116.501415</span>,<span class="number">39.926055</span>],</span></span><br><span class="line"><span class="javascript">            <span class="attr">map</span>:map</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> maskerOut = <span class="keyword">new</span> AMap.Marker(&#123;<span class="comment">//区域外的不会显示</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">position</span>:[<span class="number">117.001415</span>,<span class="number">39.926055</span>],</span></span><br><span class="line"><span class="javascript">            <span class="attr">map</span>:map</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">        <span class="comment">//添加高度面</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> object3Dlayer = <span class="keyword">new</span> AMap.Object3DLayer(&#123;<span class="attr">zIndex</span>:<span class="number">1</span>&#125;);</span></span><br><span class="line"><span class="javascript">        map.add(object3Dlayer)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> height = -<span class="number">8000</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> color = <span class="string">&#x27;#0088ffcc&#x27;</span>;<span class="comment">//rgba</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> wall = <span class="keyword">new</span> AMap.Object3D.Wall(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">path</span>:bounds,</span></span><br><span class="line"><span class="javascript">            <span class="attr">height</span>:height,</span></span><br><span class="line"><span class="javascript">            <span class="attr">color</span>:color</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        wall.transparent = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">        object3Dlayer.add(wall)</span></span><br><span class="line"><span class="javascript">        <span class="comment">//添加描边</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;bounds.length;i+=<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">new</span> AMap.Polyline(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">path</span>:bounds[i],</span></span><br><span class="line"><span class="javascript">                <span class="attr">strokeColor</span>:<span class="string">&#x27;#99ffff&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">strokeWeight</span>:<span class="number">4</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">map</span>:map</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>玩转高德地图计划</category>
      </categories>
      <tags>
        <tag>高德地图</tag>
        <tag>AMap</tag>
        <tag>掩摸</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis-generator生成Mapper只有Inser语句</title>
    <url>/2021/05/18/6.mybatis-generator%E7%94%9F%E6%88%90Mapper%E5%8F%AA%E6%9C%89Insert%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<p>最近新建了个测试库，建的比较随意，在用mybatis-generator生成Mapper时发现只有一条insert语句，以为是环境和配置问题，折腾了好久，后来发现竟然是数据表没有设置主键！！！</p>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>sass/scss编译成css的两种方法及问题</title>
    <url>/2021/05/25/7.scss%E7%BC%96%E8%AF%91%E6%88%90css%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%E5%8F%8A%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="一、dart-sass-编译"><a href="#一、dart-sass-编译" class="headerlink" title="一、dart-sass 编译"></a>一、dart-sass 编译</h2><blockquote>
<p> dart-sass是最方便的sass编译工具，也是官方目前主推的工具</p>
</blockquote>
<h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 全局安装</span><br><span class="line">npm install -g sass</span><br><span class="line"># 查看版本</span><br><span class="line">sass --version</span><br></pre></td></tr></table></figure>
<h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h3><p>进入到scss文件所在目录下，执行sass [sassname.scss] [cssname.css],例子如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sass main.scss output.css</span><br></pre></td></tr></table></figure>

<h3 id="3-问题"><a href="#3-问题" class="headerlink" title="3.问题"></a>3.问题</h3><p>我之前一直使用该方法，编译sass文件，直到最近换了新电脑，重新安装了最新版的dart-sass，再编译之前写过的代码，发现字体文件怎么也加载不出来，经过一番努力排查，发现之前写的此类代码</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.icon-twitter</span>:before &#123; content: <span class="string">&quot;\e600&quot;</span>; &#125;</span><br></pre></td></tr></table></figure>
<p>被编译成了?</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.icon-book</span>:before &#123;</span><br><span class="line">  content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从网上查到，不止我一个人遇到了这个问题，在github上有两个issues都在进行激烈的讨论 </p>
<p><a href="https://github.com/PanJiaChen/vue-element-admin/issues/3526">vue-element-admin</a> </p>
<p><a href="https://github.com/sass/sass/issues/1395">dart-sass</a><br>由于英语不是很精通，大致读了一下，说这个并不算BUG，而是我之前的那种写法不标准，并不被最新的sass语法支持，但是毕竟项目已经开发很长时间了，这种写法遍地都是，挨个改肯定是不可能，而且这个问题不算BUG的话，也不要指望在新版本中修复。 </p>
<p>于是又经过了一个晚上的艰苦战斗，终于发现<a href="mailto:&#x6e;&#x6f;&#100;&#101;&#45;&#x73;&#x61;&#115;&#115;&#x40;&#54;&#x2e;&#48;">&#x6e;&#x6f;&#100;&#101;&#45;&#x73;&#x61;&#115;&#115;&#x40;&#54;&#x2e;&#48;</a>仍然支持我过去的写法。</p>
<h2 id="二、node-sass-编译"><a href="#二、node-sass-编译" class="headerlink" title="二、node-sass 编译"></a>二、node-sass 编译</h2><h3 id="1-安装-1"><a href="#1-安装-1" class="headerlink" title="1.安装"></a>1.安装</h3><blockquote>
<p>参考链接：<a href="https://www.cnblogs.com/jone-chen/p/14275888.html">安装node-sass正确姿势</a></p>
</blockquote>
<h3 id="1-1-npm或yarm指定淘宝镜像"><a href="#1-1-npm或yarm指定淘宝镜像" class="headerlink" title="1.1.npm或yarm指定淘宝镜像"></a>1.1.npm或yarm指定淘宝镜像</h3><p>查看镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> npm命令</span></span><br><span class="line">npm config get registry</span><br><span class="line"><span class="meta">#</span><span class="bash"> yarn命令</span></span><br><span class="line">yarn config get registry</span><br></pre></td></tr></table></figure>
<p>修改为淘宝镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> npm命令</span></span><br><span class="line">npm config set registry http://registry.npm.taobao.org/</span><br><span class="line"><span class="meta">#</span><span class="bash"> yarn命令</span></span><br><span class="line">yarn config set registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>
<p>此时，正常情况再安装node-sass都可以成功，如果安装还报错，则进入下面第二步。安装编译windows平台编译环境</p>
<h3 id="1-2-安装windows平台编译环境（需要在管理员权限下安装）"><a href="#1-2-安装windows平台编译环境（需要在管理员权限下安装）" class="headerlink" title="1.2.安装windows平台编译环境（需要在管理员权限下安装）"></a>1.2.安装windows平台编译环境（需要在管理员权限下安装）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g node-gyp</span><br><span class="line">npm install --global --production windows-build-tools </span><br></pre></td></tr></table></figure>
<h3 id="1-3-当然也可在项目目录下临时安装指定node-sass为镜像淘宝"><a href="#1-3-当然也可在项目目录下临时安装指定node-sass为镜像淘宝" class="headerlink" title="1.3.当然也可在项目目录下临时安装指定node-sass为镜像淘宝"></a>1.3.当然也可在项目目录下临时安装指定node-sass为镜像淘宝</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g node-sass --sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>以上三步，基本保证node-sass安装成功！</p>
<h3 id="2-使用-1"><a href="#2-使用-1" class="headerlink" title="2.使用"></a>2.使用</h3><p>使用方法和dart-sass一样</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node-sass main.scss output.css</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加静态html-跳过渲染</title>
    <url>/2021/05/26/8.Hexo%E6%B7%BB%E5%8A%A0%E9%9D%99%E6%80%81html-%E8%B7%B3%E8%BF%87%E6%B8%B2%E6%9F%93/</url>
    <content><![CDATA[<p>对于有前端基础的博主来说，简单的markdown样式已经不能满足需求，我们需要加入一些css和js特效，显然直接写html是最方便的。 </p>
<p>hexo当然也支持这种操作，那就是：跳过渲染。</p>
<h2 id="创建文件夹用于存放html"><a href="#创建文件夹用于存放html" class="headerlink" title="创建文件夹用于存放html"></a>创建文件夹用于存放html</h2><p>在hexo根目录的source文件夹下，新建文件夹，我这里就命名为html</p>
<h2 id="配置跳过渲染"><a href="#配置跳过渲染" class="headerlink" title="配置跳过渲染"></a>配置跳过渲染</h2><p>在hexo根目录下,添加如下代码</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;README.md&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;html/*&quot;</span></span><br></pre></td></tr></table></figure>

<p>注意如果html下还有子文件夹的话，那子文件夹的名称也要写出来</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;html/子文件夹1/*&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;html/子文件夹2/*&quot;</span></span><br></pre></td></tr></table></figure>
<p>或者直接写</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;html/**&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>ElementUI弹出内容位于遮罩之下的问题</title>
    <url>/2021/05/26/9.ElementUI%E5%BC%B9%E5%87%BA%E5%86%85%E5%AE%B9%E4%BD%8D%E4%BA%8E%E9%81%AE%E7%BD%A9%E4%B9%8B%E4%B8%8B%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>由于修改ElementUI原生样式或者多级遮罩嵌套导致的弹出层位于遮罩层下面，点击不到的问题，可以通过添加modal-append-to-body属性解决。<br>适用于Drawer、MessageBox、Dialog等。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-drawer</span></span></span><br><span class="line"><span class="tag">  <span class="attr">title</span>=<span class="string">&quot;我是标题&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:visible.sync</span>=<span class="string">&quot;drawerStatus&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:with-header</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:modal-append-to-body</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>总数：&#123;&#123; deviceStatus.total &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>在线：&#123;&#123; deviceStatus.totalOnline &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>离线：&#123;&#123; deviceStatus.offline &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-drawer</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>ElementUI</tag>
      </tags>
  </entry>
  <entry>
    <title>在CentOS7上通过tomcat发布vue项目</title>
    <url>/2021/06/01/Linux%E7%AC%94%E8%AE%B0/%E5%9C%A8CentOS7%E4%B8%8A%E9%80%9A%E8%BF%87tomcat%E5%8F%91%E5%B8%83vue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="服务器安装绿色版tomcat"><a href="#服务器安装绿色版tomcat" class="headerlink" title="服务器安装绿色版tomcat"></a>服务器安装绿色版tomcat</h2><p>从<a href="https://blog.csdn.net/zengshaotao/article/details/84520103">官网</a>下载对应版本的tomcat,我下载的是apache-tomcat-9.0.46.tar.gz </p>
<blockquote>
<p>注意后缀.tar.gz是绿色版的tomcat </p>
</blockquote>
<p>将下载好的文件拷贝到服务器上，加压文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar zxvf apache-tomcat-9.0.46.tar.gz</span><br></pre></td></tr></table></figure>

<p>进入到tomcat的bin目录下，执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./startup.sh</span><br></pre></td></tr></table></figure>

<p>启动成功后，终端出现如下提示<br><img src="http://qiniu.bigdudu.cn/uuid-asfasfdasdfswe2342ed2d.png"></p>
<h2 id="vue打包"><a href="#vue打包" class="headerlink" title="vue打包"></a>vue打包</h2><p>根据tomcat的发布规则，要发布的网站都放在webapps文件夹下，每个项目一个子文件夹，这就导致网站会生成二级目录。 </p>
<p>一般的vue配置是不存在二级目录的，下面只需要修改一下vue-cli的打包配置就可以了。 </p>
<p>找到publicPath，调整为正确的路径，如果只是普通的二级目录的话，加一个点就可以</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里是默认</span></span><br><span class="line">publicPath: &#x27;/&#x27;,</span><br><span class="line"><span class="comment">//修改为如下配置</span></span><br><span class="line">publicPath: &#x27;./&#x27;,</span><br></pre></td></tr></table></figure>

<h2 id="修改tomcat默认端口"><a href="#修改tomcat默认端口" class="headerlink" title="修改tomcat默认端口"></a>修改tomcat默认端口</h2><p>如果默认的8080端口被占用，可以打开tomcat路径下/conf/server.xml,找到如下代码段,将8080修改为想要的端口</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改centos防火墙，开放对应端口，比如我上面把8080修改为8083，执行以下命令 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开放端口</span><br><span class="line">firewall-cmd --zone=public --add-port=8083/tcp --permanent</span><br><span class="line"></span><br><span class="line"># 刷新防火墙</span><br><span class="line">systemctl restart firewalld.service</span><br><span class="line"></span><br><span class="line"># 查询已开放的本机端口</span><br><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux笔记</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>vue</tag>
        <tag>tomcate</tag>
      </tags>
  </entry>
  <entry>
    <title>nacos部署及配置修改</title>
    <url>/2021/06/24/%E5%BE%AE%E6%9C%8D%E5%8A%A1/1.nacos%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%85%8D%E7%BD%AE%E4%BF%AE%E6%94%B9/</url>
    <content><![CDATA[<h4 id="开启注册鉴权"><a href="#开启注册鉴权" class="headerlink" title="开启注册鉴权"></a>开启注册鉴权</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">### If turn on auth system:</span></span><br><span class="line"><span class="meta">nacos.core.auth.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<p>bootstrap.yml中的配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-nacosdemo</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">39.98</span><span class="number">.138</span><span class="number">.165</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">39.98</span><span class="number">.138</span><span class="number">.165</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">passowrd:</span> <span class="string">nacos</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>经测试 nacos2.0.2不支持以上配置，nacos1.2.1支持，但是降级后又遇到其他问题，暂时搁置。</p>
</blockquote>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>2.1.SpringCloud配置OAuth验证2—白名单</title>
    <url>/2021/06/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1/2.1.SpringCloud%E9%85%8D%E7%BD%AEOAuth%E9%AA%8C%E8%AF%812%E2%80%94%E7%99%BD%E5%90%8D%E5%8D%95/</url>
    <content><![CDATA[<p>Security默认过滤所有请求，<br>配置OAuth后，swagger、login等无须鉴权的接口也同样无法访问，需要指定白名单。</p>
<p>然而仅在客户端添加白名单并不能生效，需要在客户端和鉴权服务器两处同步添加白名单才行。</p>
<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haiot.dm.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.RemoteTokenServices;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenStore;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OAuthConsumerConfig</span> <span class="keyword">extends</span> <span class="title">ResourceServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;security.oauth2.client.client-id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String clientId;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;security.oauth2.client.client-secret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;security.oauth2.authorization.check-token-access&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String checkTokenEndpointUrl;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisConnectionFactory redisConnectionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenStore <span class="title">redisTokenStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisTokenStore(redisConnectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RemoteTokenServices <span class="title">tokenService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RemoteTokenServices tokenService = <span class="keyword">new</span> RemoteTokenServices();</span><br><span class="line">        tokenService.setClientId(clientId);</span><br><span class="line">        tokenService.setClientSecret(secret);</span><br><span class="line">        tokenService.setCheckTokenEndpointUrl(checkTokenEndpointUrl);</span><br><span class="line">        <span class="keyword">return</span> tokenService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ResourceServerSecurityConfigurer resources)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        resources.tokenServices(tokenService());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Http安全配置，对每个到达系统的http请求链接进行校验</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//所有请求必须认证通过</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                <span class="comment">//下边的路径放行</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/get2&quot;</span>,<span class="string">&quot;/v2/api-docs&quot;</span>, <span class="string">&quot;/swagger-resources/configuration/ui&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/swagger-resources&quot;</span>,<span class="string">&quot;/swagger-resources/configuration/security&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/swagger-ui.html&quot;</span>,<span class="string">&quot;/course/coursebase/**&quot;</span>).permitAll()</span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="鉴权服务器"><a href="#鉴权服务器" class="headerlink" title="鉴权服务器"></a>鉴权服务器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haiot.dm.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.WebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests().antMatchers(<span class="string">&quot;/**&quot;</span>).permitAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 配置白名单</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        web.ignoring().antMatchers(<span class="string">&quot;/get2&quot;</span>,<span class="string">&quot;/userlogout&quot;</span>,<span class="string">&quot;/userjwt&quot;</span>,<span class="string">&quot;/v2/api-docs&quot;</span>, <span class="string">&quot;/swagger-resources/configuration&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;/ui&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/swagger-resources&quot;</span>,<span class="string">&quot;/swagger-resources/configuration/security&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/swagger-ui.html&quot;</span>,<span class="string">&quot;/css/**&quot;</span>, <span class="string">&quot;/js/**&quot;</span>,<span class="string">&quot;/images/**&quot;</span>, <span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;**/favicon.ico&quot;</span>, <span class="string">&quot;/index&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>nacos</tag>
        <tag>springcloud</tag>
        <tag>oauth</tag>
        <tag>白名单</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud在IDEA中可调试，但是运行jar包报错</title>
    <url>/2021/06/28/%E5%BE%AE%E6%9C%8D%E5%8A%A1/3.SpringCloud%E5%9C%A8IDEA%E4%B8%AD%E5%8F%AF%E8%B0%83%E8%AF%95%EF%BC%8C%E4%BD%86%E6%98%AF%E8%BF%90%E8%A1%8Cjar%E5%8C%85%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>SpringCloud在IDEA中可调试，但是运行jar包报错，仔细检查日志发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">parse data from Nacos error,dataId:cloud-provider-nacosdemo-dev.yaml,data:</span><br></pre></td></tr></table></figure>

<p>原因是nacos配置的默认编码格式是UTF-8，IDEA配置的编码格式也是UTF-8，而Windows10系统运行文件，编码格式是GBK。<br>解决办法就是在启动jar包时添加参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Dfile.encoding=utf-8 -jar nacosdemo.jar --server.port=9007</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>nacos</tag>
        <tag>springcloud</tag>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>maven package 报错“找不到符号”</title>
    <url>/2021/09/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1/4.Maven%20Package%20%E6%8A%A5%E9%94%99%E6%89%BE%E4%B8%8D%E5%88%B0%E7%AC%A6%E5%8F%B7/</url>
    <content><![CDATA[<p>在模块中引用了其他子模块，调试运行能成功，但是在maven打包时，执行maven package 提示“找不到符号”，且报错位置所指向的包为自定义的子模块。</p>
<p>解决方法：</p>
<ol>
<li><p>在子模块中执行：mvn clean install</p>
</li>
<li><p>在主工程执行：mvn clean package</p>
</li>
</ol>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>springcloud</tag>
        <tag>打包</tag>
      </tags>
  </entry>
  <entry>
    <title>Gateway原理、配置和使用</title>
    <url>/2021/09/22/%E5%BE%AE%E6%9C%8D%E5%8A%A1/5.Gateway%E5%8E%9F%E7%90%86%E3%80%81%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">lower-case-service-id:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cloud-consumer-video</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-consumer-video</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/video/&#123;segment&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cloud-provider-fileserver</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-provider-fileserver</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/file/&#123;segment&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cloud-provider-videotranscode</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-provider-videotranscode</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/flow/&#123;segment&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cloud-device-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-device-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/device/&#123;segment&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cloud-provider-oauth</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-provider-oauth</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/oauth/&#123;segment&#125;</span></span><br></pre></td></tr></table></figure>

<p>id:唯一标识，没用<br>uri:重定向到盖uri<br>predicates：路由条件，接受一个输入参数</p>
<p>例子：<br>当访问地址<a href="http://localhost:8080/csdn/1.jsp%E6%97%B6%EF%BC%8C">http://localhost:8080/csdn/1.jsp时，</a><br>会路由到上游地址<a href="https://blog.csdn.net/1.jsp%E3%80%82">https://blog.csdn.net/1.jsp。</a> </p>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>springcloud</tag>
        <tag>gateway</tag>
      </tags>
  </entry>
  <entry>
    <title>自省</title>
    <url>/2021/05/13/%E9%9A%8F%E7%AC%94/0.%E8%87%AA%E7%9C%81/</url>
    <content><![CDATA[<p>关心时政，多想两步 </p>
<p>只要把活在当下视作一个奇迹，就不会在乎日常工作中那些小小的失败和挫折了</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>随笔2</title>
    <url>/2021/05/26/%E9%9A%8F%E7%AC%94/8.1.%E9%9A%8F%E7%AC%942/</url>
    <content><![CDATA[<p>随笔2</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>随笔3</title>
    <url>/2021/05/26/%E9%9A%8F%E7%AC%94/8.2.%E9%9A%8F%E7%AC%943/</url>
    <content><![CDATA[<p>随笔3</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>随笔4</title>
    <url>/2021/05/26/%E9%9A%8F%E7%AC%94/8.3.%E9%9A%8F%E7%AC%944/</url>
    <content><![CDATA[<p>随笔4</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloud配置OAuth验证</title>
    <url>/2021/06/25/%E5%BE%AE%E6%9C%8D%E5%8A%A1/2.SpringCloud%E9%85%8D%E7%BD%AEOAuth%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<blockquote>
<p>转载自 <a href="https://juejin.cn/post/6844904095942180878?utm_source=gold_browser_extension">可能是全网最详细的 Spring Cloud OAuth2 单点登录使用教程了</a><br>代码部分略有修改</p>
</blockquote>
<p>OAuth 2 有四种授权模式，分别是授权码模式（authorization code）、简化模式（implicit）、密码模式（resource owner password credentials）、客户端模式（client credentials），具体 OAuth2 是什么，可以参考这篇文章。(<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html</a>)<br><img src="http://qiniu.bigdudu.cn/20210625195211.png"><br>本文我们将使用授权码模式和密码模式两种方式来实现用户认证和授权管理。<br>OAuth2 其实是一个关于授权的网络标准，它制定了设计思路和运行流程，利用这个标准我们其实是可以自己实现 OAuth2 的认证过程的。今天要介绍的 spring-cloud-starter-oauth2 ，其实是 Spring Cloud 按照 OAuth2 的标准并结合 spring-security 封装好的一个具体实现。</p>
<h3 id="什么情况下需要用-OAuth2"><a href="#什么情况下需要用-OAuth2" class="headerlink" title="什么情况下需要用 OAuth2"></a>什么情况下需要用 OAuth2</h3><p>首先大家最熟悉的就是几乎每个人都用过的，比如用微信登录、用 QQ 登录、用微博登录、用 Google 账号登录、用 github 授权登录等等，这些都是典型的 OAuth2 使用场景。假设我们做了一个自己的服务平台，如果不使用 OAuth2 登录方式，那么我们需要用户先完成注册，然后用注册号的账号密码或者用手机验证码登录。而使用了 OAuth2 之后，相信很多人使用过、甚至开发过公众号网页服务、小程序，当我们进入网页、小程序界面，第一次使用就无需注册，直接使用微信授权登录即可，大大提高了使用效率。因为每个人都有微信号，有了微信就可以马上使用第三方服务，这体验不要太好了。而对于我们的服务来说，我们也不需要存储用户的密码，只要存储认证平台返回的唯一ID 和用户信息即可。</p>
<p>以上是使用了 OAuth2 的授权码模式，利用第三方的权威平台实现用户身份的认证。当然了，如果你的公司内部有很多个服务，可以专门提取出一个认证中心，这个认证中心就充当上面所说的权威认证平台的角色，所有的服务都要到这个认证中心做认证。</p>
<p>这样一说，发现没，这其实就是个单点登录的功能。这就是另外一种使用场景，对于多服务的平台，可以使用 OAuth2 实现服务的单点登录，只做一次登录，就可以在多个服务中自由穿行，当然仅限于授权范围内的服务和接口。</p>
<h3 id="实现统一认证功能"><a href="#实现统一认证功能" class="headerlink" title="实现统一认证功能"></a>实现统一认证功能</h3><p>本篇先介绍密码模式实现的单点登录，下一篇再继续说授权码模式。</p>
<p>在微服务横行的今天，谁敢说自己手上没几个微服务。微服务减少了服务间的耦合，同时也在某些方面增加了系统的复杂度，比如说用户认证。假设我们这里实现了一个电商平台，用户看到的就是一个 APP 或者一个 web 站点，实际上背后是由多个独立的服务构成的，比如用户服务、订单服务、产品服务等。用户只要第一次输入用户名、密码完成登录后，一段时间内，都可以任意访问各个页面，比如产品列表页面、我的订单页面、我的关注等页面。</p>
<p>我们可以想象一下，自然能够想到，在请求各个服务、各个接口的时候，一定携带着什么凭证，然后各个服务才知道请求接口的用户是哪个，不然肯定有问题，那其实这里面的凭证简单来说就是一个 Token，标识用户身份的 Token。</p>
<h4 id="系统架构说明"><a href="#系统架构说明" class="headerlink" title="系统架构说明"></a>系统架构说明</h4><p>认证中心：oauth2-auth-server，OAuth2 主要实现端，Token 的生成、刷新、验证都在认证中心完成。</p>
<p>订单服务：oauth2-client-order-server，微服务之一，接收到请求后会到认证中心验证。</p>
<p>用户服务：oauth2-client-user-server，微服务之二，接收到请求后会到认证中心验证。</p>
<p>客户端：例如 APP 端、web 端 等终端<br><img src="http://qiniu.bigdudu.cn/20210625195406.png"></p>
<p>上图描述了使用了 OAuth2 的客户端与微服务间的请求过程。大致的过程就是客户端用用户名和密码到认证服务端换取 token，返回给客户端，客户端拿着 token 去各个微服务请求数据接口，一般这个 token 是放到 header 中的。当微服务接到请求后，先要拿着 token 去认证服务端检查 token 的合法性，如果合法，再根据用户所属的角色及具有的权限动态的返回数据。</p>
<h4 id="创建并配置认证服务端"><a href="#创建并配置认证服务端" class="headerlink" title="创建并配置认证服务端"></a>创建并配置认证服务端</h4><p>配置最多的就是认证服务端，验证账号、密码，存储 token，检查 token ,刷新 token 等都是认证服务端的工作。</p>
<p>1、引入需要的 maven 包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--       &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--           &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--           &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--       &lt;/dependency&gt;--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--监控--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--spring-cloud-starter-security、spring-security-oauth2、spring-security-jwt的整合--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--mysql-connector-java--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>spring-cloud-starter-oauth2包含了 spring-cloud-starter-security，所以不用再单独引入了。之所以引入 redis 包，是因为下面会介绍一种用 redis 存储 token 的方式。</p>
<p>2、配置好 application.yml</p>
<p>将项目基本配置设置好，并加入有关 redis 的配置，稍后会用到。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-oauth</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">*</span></span><br><span class="line"><span class="comment">#      config:</span></span><br><span class="line"><span class="comment">#        server-addr: *</span></span><br><span class="line"><span class="comment">#        group: DEFAULT_GROUP</span></span><br><span class="line"><span class="comment">#        file-extension: yaml</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://*/*?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">*</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">*</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">*</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">management:</span></span><br><span class="line">    <span class="attr">endpoint:</span></span><br><span class="line">      <span class="attr">health:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>3、spring security 基础配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haiot.dm.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 允许匿名访问所有接口 主要是 oauth 接口     * <span class="doctag">@param</span> http     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests().antMatchers(<span class="string">&quot;/**&quot;</span>).permitAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用@EnableWebSecurity注解修饰，并继承自WebSecurityConfigurerAdapter类。</p>
<p>这个类的重点就是声明 PasswordEncoder 和 AuthenticationManager两个 Bean。稍后会用到。其中 BCryptPasswordEncoder是一个密码加密工具类，它可以实现不可逆的加密，AuthenticationManager是为了实现 OAuth2 的 password 模式必须要指定的授权管理 Bean。</p>
<p>4、实现 UserDetailsService</p>
<p>如果你之前用过 Security 的话，那肯定对这个类很熟悉，它是实现用户身份验证的一种方式，也是最简单方便的一种。另外还有结合 AuthenticationProvider的方式，有机会讲 Security 的时候再展开来讲吧。</p>
<p>UserDetailsService的核心就是 loadUserByUsername方法，它要接收一个字符串参数，也就是传过来的用户名，返回一个 UserDetails对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haiot.dm.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component(value = &quot;kiteUserDetailsService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KiteUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;usernameis:&quot;</span> + username);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!username.equals(<span class="string">&quot;admin&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">&quot;the user is not found&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String role = <span class="string">&quot;ROLE_ADMIN&quot;</span>;</span><br><span class="line">            List&lt;SimpleGrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(role));</span><br><span class="line">            String password = passwordEncoder.encode(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> org.springframework.security.core.userdetails.User(username, password, authorities);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里为了做演示，把用户名、密码和所属角色都写在代码里了，正式环境中，这里应该是从数据库或者其他地方根据用户名将加密后的密码及所属角色查出来的。账号 admin ，密码 123456，稍后在换取 token 的时候会用到。并且给这个用户设置 “ROLE_ADMIN” 角色。</p>
<p>5、OAuth2 配置文件</p>
<p>创建一个配置文件继承自 AuthorizationServerConfigurerAdapter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haiot.dm.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenStore;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OAuth2Config</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder passwordEncoder;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> UserDetailsService kiteUserDetailsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationManager authenticationManager;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenStore redisTokenStore;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(<span class="keyword">final</span> AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span>&#123;        <span class="comment">/**         * redis token 方式         */</span></span><br><span class="line">        endpoints.authenticationManager(authenticationManager).userDetailsService(kiteUserDetailsService).tokenStore(redisTokenStore);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  authorizedGrantTypes:</span></span><br><span class="line"><span class="comment">     *      authorization_code：授权码类型</span></span><br><span class="line"><span class="comment">     *      implicit：隐式授权类型</span></span><br><span class="line"><span class="comment">     *      password：资源所有者（即用户）密码类型</span></span><br><span class="line"><span class="comment">     *      client_credentials：客户端凭据（客户端ID以及Key）类型</span></span><br><span class="line"><span class="comment">     *      refresh_token：通过以上授权获得的刷新令牌来获取新的令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clients</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        clients.inMemory().withClient(<span class="string">&quot;order-client&quot;</span>).secret(passwordEncoder</span><br><span class="line">                .encode(<span class="string">&quot;order-secret-8888&quot;</span>))</span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;refresh_token&quot;</span>, <span class="string">&quot;authorization_code&quot;</span>, <span class="string">&quot;password&quot;</span>)</span><br><span class="line">                .accessTokenValiditySeconds(<span class="number">3600</span>).scopes(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withClient(<span class="string">&quot;user-client&quot;</span>)</span><br><span class="line">                .secret(passwordEncoder.encode(<span class="string">&quot;user-secret-8888&quot;</span>))</span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;refresh_token&quot;</span>, <span class="string">&quot;authorization_code&quot;</span>, <span class="string">&quot;password&quot;</span>)</span><br><span class="line">                .accessTokenValiditySeconds(<span class="number">3600</span>).scopes(<span class="string">&quot;all&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        security.allowFormAuthenticationForClients();<span class="comment">//允许客户端访问 OAuth2 授权接口</span></span><br><span class="line">        security.checkTokenAccess(<span class="string">&quot;isAuthenticated()&quot;</span>);<span class="comment">//允许已授权用户访问 checkToken 接口</span></span><br><span class="line">        security.tokenKeyAccess(<span class="string">&quot;isAuthenticated()&quot;</span>);<span class="comment">//允许已授权用户访问 获取 token 接口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有三个 configure 方法的重写。<br>AuthorizationServerEndpointsConfigurer参数的重写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">endpoints.authenticationManager(authenticationManager)                .userDetailsService(kiteUserDetailsService)                .tokenStore(redisTokenStore);</span><br></pre></td></tr></table></figure>
<p>authenticationManage() 调用此方法才能支持 password 模式。</p>
<p>userDetailsService() 设置用户验证服务。</p>
<p>tokenStore() 指定 token 的存储方式。</p>
<p>redisTokenStore Bean 的定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haiot.dm.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenStore;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTokenStoreConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisConnectionFactory redisConnectionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenStore <span class="title">redisTokenStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisTokenStore(redisConnectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>ClientDetailsServiceConfigurer参数的重写，在这里定义各个端的约束条件。包括<br>ClientId、Client-Secret：这两个参数对应请求端定义的 cleint-id 和 client-secret</p>
<p>authorizedGrantTypes 可以包括如下几种设置中的一种或多种：</p>
<ul>
<li>authorization_code：授权码类型。</li>
<li>implicit：隐式授权类型。</li>
<li>password：资源所有者（即用户）密码类型。</li>
<li>client_credentials：客户端凭据（客户端ID以及Key）类型。</li>
<li>refresh_token：通过以上授权获得的刷新令牌来获取新的令牌。</li>
</ul>
<p>accessTokenValiditySeconds：token 的有效期<br>scopes：用来限制客户端访问的权限，在换取的 token 的时候会带上 scope 参数，只有在 scopes 定义内的，才可以正常换取 token。</p>
<p>上面代码中是使用 inMemory 方式存储的，将配置保存到内存中，相当于硬编码了。正式环境下的做法是持久化到数据库中，比如 mysql 中。</p>
<blockquote>
<p>具体做法可参考原链接，此处省略</p>
</blockquote>
<p>还有一个重写的方法 public void configure(AuthorizationServerSecurityConfigurer security)，这个方法限制客户端访问认证接口的权限。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">security.allowFormAuthenticationForClients();</span><br><span class="line">security.checkTokenAccess(<span class="string">&quot;isAuthenticated()&quot;</span>);</span><br><span class="line">security.tokenKeyAccess(<span class="string">&quot;isAuthenticated()&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>第一行代码是允许客户端访问 OAuth2 授权接口，否则请求 token 会返回 401。</p>
<p>第二行和第三行分别是允许已授权用户访问 checkToken 接口和获取 token 接口。</p>
<p>完成之后，启动项目，如果你用的是 IDEA 会在下方的 Mapping 窗口中看到 oauth2 相关的 RESTful 接口。</p>
<p><img src="http://qiniu.bigdudu.cn/20210625200421.png"><br>主要有如下几个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /oauth/authorize  授权码模式认证授权接口</span><br><span class="line">GET/POST /oauth/token  获取 token 的接口</span><br><span class="line">POST  /oauth/check_token  检查 token 合法性接口</span><br></pre></td></tr></table></figure>

<h4 id="创建用户客户端项目"><a href="#创建用户客户端项目" class="headerlink" title="创建用户客户端项目"></a>创建用户客户端项目</h4><p>上面创建完成了认证服务端，下面开始创建一个客户端，对应到我们系统中的业务相关的微服务。我们假设这个微服务项目是管理用户相关数据的，所以叫做用户客户端。</p>
<p>1、引用相关的 maven 包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、application.yml 配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10011</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-consumer-oauthclient</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">*</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">oauth2:</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">      <span class="attr">client-id:</span> <span class="string">user-client</span></span><br><span class="line">      <span class="attr">client-secret:</span> <span class="string">user-secret-8888</span></span><br><span class="line">      <span class="attr">user-authorization-uri:</span> <span class="string">http://localhost:9000/oauth/authorize</span></span><br><span class="line">      <span class="attr">access-token-uri:</span> <span class="string">http://localhost:9000/oauth/token</span></span><br><span class="line">    <span class="attr">resource:</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">user-client</span></span><br><span class="line">      <span class="attr">user-info-uri:</span> <span class="string">user-info</span></span><br><span class="line">    <span class="attr">authorization:</span></span><br><span class="line">      <span class="attr">check-token-access:</span> <span class="string">http://localhost:9000/oauth/check_token</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上面是常规配置信息以及 redis 配置，重点是下面的 security 的配置，这里的配置稍有不注意就会出现 401 或者其他问题。</p>
<p>client-id、client-secret 要和认证服务中的配置一致，如果是使用 inMemory 还是 jdbc 方式。</p>
<p>user-authorization-uri 是授权码认证方式需要的，下一篇文章再说。</p>
<p>access-token-uri 是密码模式需要用到的获取 token 的接口。</p>
<p>authorization.check-token-access 也是关键信息，当此服务端接收到来自客户端端的请求后，需要拿着请求中的 token 到认证服务端做 token 验证，就是请求的这个接口</p>
<p>3、资源配置文件</p>
<p>在 OAuth2 的概念里，所有的接口都被称为资源，接口的权限也就是资源的权限，所以 Spring Security OAuth2 中提供了关于资源的注解 @EnableResourceServer，和 @EnableWebSecurity的作用类似。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haiot.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.RemoteTokenServices;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.TokenStore;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceServerConfig</span> <span class="keyword">extends</span> <span class="title">ResourceServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;security.oauth2.client.client-id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String clientId;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;security.oauth2.client.client-secret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;security.oauth2.authorization.check-token-access&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String checkTokenEndpointUrl;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisConnectionFactory redisConnectionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenStore <span class="title">redisTokenStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisTokenStore(redisConnectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RemoteTokenServices <span class="title">tokenService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RemoteTokenServices tokenService = <span class="keyword">new</span> RemoteTokenServices();</span><br><span class="line">        tokenService.setClientId(clientId);</span><br><span class="line">        tokenService.setClientSecret(secret);</span><br><span class="line">        tokenService.setCheckTokenEndpointUrl(checkTokenEndpointUrl);</span><br><span class="line">        <span class="keyword">return</span> tokenService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ResourceServerSecurityConfigurer resources)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        resources.tokenServices(tokenService());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>因为使用的是 redis 作为 token 的存储，所以需要特殊配置一下叫做 tokenService 的 Bean，通过这个 Bean 才能实现 token 的验证。</p>
<p>4、最后，添加一个 RESTful 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.haiot.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.prepost.PreAuthorize;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;get&quot;)</span>    <span class="comment">//@PreAuthorize(&quot;hasAuthority(&#x27;ROLE_ADMIN&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAnyRole(&#x27;ROLE_ADMIN&#x27;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(Authentication authentication)</span> </span>&#123;</span><br><span class="line">        authentication.getCredentials();</span><br><span class="line">        OAuth2AuthenticationDetails details = (OAuth2AuthenticationDetails) authentication.getDetails();</span><br><span class="line">        String token = details.getTokenValue();</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一个 RESTful 方法，只有当访问用户具有 ROLE_ADMIN 权限时才能访问，否则返回 401 未授权。</p>
<p>通过 Authentication 参数或者 SecurityContextHolder.getContext().getAuthentication() 可以拿到授权信息进行查看。</p>
<h4 id="测试认证功能"><a href="#测试认证功能" class="headerlink" title="测试认证功能"></a>测试认证功能</h4><p>1、启动认证服务端，启动端口为 6001</p>
<p>2、启动用户服务客户端，启动端口为6101</p>
<p>3、请求认证服务端获取 token</p>
<p>我是用 REST Client 来做访问请求的，请求格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST http://localhost:6001/oauth/token?grant_type=password&amp;username=admin&amp;password=123456&amp;scope=all</span><br><span class="line">Accept: */*</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Authorization: Basic dXNlci1jbGllbnQ6dXNlci1zZWNyZXQtODg4OA==</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>假设咱们在一个 web 端使用，grant_type 是 password，表明这是使用 OAuth2 的密码模式。</p>
<p>username=admin 和 password=123456 就相当于在 web 端登录界面输入的用户名和密码，我们在认证服务端配置中固定了用户名是 admin 、密码是 123456，而线上环境中则应该通过查询数据库获取。</p>
<p>scope=all 是权限有关的，在认证服务的 OAuthConfig 中指定了 scope 为 all 。</p>
<p>Authorization 要加在请求头中，格式为 Basic 空格 base64(clientId:clientSecret)，这个微服务客户端的 client-id 是 user-client，client-secret 是 user-secret-8888，将这两个值通过冒号连接，并使用 base64 编码(user-client:user-secret-8888)之后的值为 dXNlci1jbGllbnQ6dXNlci1zZWNyZXQtODg4OA==，可以通过 <a href="https://www.sojson.com/base64.html">https://www.sojson.com/base64.html</a> 在线编码获取。</p>
<p>运行请求后，如果参数都正确的话，获取到的返回内容如下，是一段 json 格式</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span>: <span class="string">&quot;9f958300-5005-46ea-9061-323c9e6c7a4d&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span>: <span class="string">&quot;bearer&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;refresh_token&quot;</span>: <span class="string">&quot;0f5871f5-98f1-405e-848e-80f641bab72e&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span>: <span class="number">3599</span>,</span><br><span class="line">  <span class="attr">&quot;scope&quot;</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>access_token :  就是之后请求需要带上的 token，也是本次请求的主要目的<br>token_type：为 bearer，这是 access token 最常用的一种形式<br>refresh_token：之后可以用这个值来换取新的 token，而不用输入账号密码<br>expires_in：token 的过期时间(秒)</p>
<p>4、用获取到的 token 请求资源接口</p>
<p>我们在用户客户端中定义了一个接口 <a href="http://localhost:6101/client-user/get%EF%BC%8C%E7%8E%B0%E5%9C%A8%E5%B0%B1%E6%8B%BF%E7%9D%80%E4%B8%8A%E4%B8%80%E6%AD%A5%E8%8E%B7%E5%8F%96%E7%9A%84">http://localhost:6101/client-user/get，现在就拿着上一步获取的</a> token 来请求这个接口。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET http://localhost:6101/client-user/get</span><br><span class="line">Accept: */*</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Authorization: bearer ce334918-e666-455a-8ecd-8bd680415d84</span><br></pre></td></tr></table></figure>
<p>同样需要请求头 Authorization，格式为 bearer + 空格 + token，正常情况下根据接口的逻辑，会把 token 原样返回。</p>
<p>5、token 过期后，用 refresh_token 换取 access_token</p>
<p>一般都会设置 access_token 的过期时间小于 refresh_token 的过期时间，以便在 access_token 过期后，不用用户再次登录的情况下，获取新的 access_token。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### 换取 access_token</span><br><span class="line">POST http://localhost:6001/oauth/token?grant_type=refresh_token&amp;refresh_token=706dac10-d48e-4795-8379-efe8307a2282</span><br><span class="line">Accept: */*</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Authorization: Basic dXNlci1jbGllbnQ6dXNlci1zZWNyZXQtODg4OA==</span><br></pre></td></tr></table></figure>

<p>grant_type 设置为 refresh_token。</p>
<p>refresh_token 设置为请求 token 时返回的 refresh_token 的值。</p>
<p>请求头加入 Authorization，格式依然是 Basic + 空格 + base64(client-id:client-secret)</p>
<p>请求成功后会返回和请求 token 同样的数据格式。</p>
<h4 id="用-JWT-替换-redisToken"><a href="#用-JWT-替换-redisToken" class="headerlink" title="用 JWT 替换 redisToken"></a>用 JWT 替换 redisToken</h4><p>上面 token 的存储用的是 redis 的方案，Spring Security OAuth2 还提供了 jdbc 和 jwt 的支持，jdbc 的暂不考虑，现在来介绍用 JWT 的方式来实现 token 的存储。</p>
<p>用 JWT 的方式就不用把 token 再存储到服务端了，JWT 有自己特殊的加密方式，可以有效的防止数据被篡改，只要不把用户密码等关键信息放到 JWT 里就可以保证安全性。</p>
<p>认证服务端改造</p>
<p>先把有关 redis 的配置去掉。</p>
<p>添加 JwtConfig 配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenConfig</span> </span>&#123;    </span><br><span class="line">  <span class="meta">@Bean</span>    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> TokenStore <span class="title">jwtTokenStore</span><span class="params">()</span> </span>&#123;       </span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> JwtTokenStore(jwtAccessTokenConverter());   </span><br><span class="line">      &#125;   </span><br><span class="line">  <span class="meta">@Bean</span>    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> JwtAccessTokenConverter <span class="title">jwtAccessTokenConverter</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        JwtAccessTokenConverter accessTokenConverter = <span class="keyword">new</span> JwtAccessTokenConverter();</span><br><span class="line">        accessTokenConverter.setSigningKey(<span class="string">&quot;dev&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> accessTokenConverter; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>JwtAccessTokenConverter是为了做 JWT 数据转换，这样做是因为 JWT 有自身独特的数据格式。如果没有了解过 JWT ，可以搜索一下先了解一下。</p>
<h4 id="更改-OAuthConfig-配置类"><a href="#更改-OAuthConfig-配置类" class="headerlink" title="更改 OAuthConfig 配置类"></a>更改 OAuthConfig 配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowiredprivate</span> </span><br><span class="line">TokenStore jwtTokenStore;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JwtAccessTokenConverter jwtAccessTokenConverter;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(<span class="keyword">final</span> AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span></span><br><span class="line"><span class="function"></span>&#123;        </span><br><span class="line">  <span class="comment">/**         * 普通 jwt 模式         */</span>         </span><br><span class="line">  endpoints.tokenStore(jwtTokenStore)                </span><br><span class="line">  .accessTokenConverter(jwtAccessTokenConverter)                </span><br><span class="line">  .userDetailsService(kiteUserDetailsService)                </span><br><span class="line">  <span class="comment">/**                 * 支持 password 模式                 */</span>                </span><br><span class="line">  .authenticationManager(authenticationManager);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注入 JWT 相关的 Bean，然后修改 configure(final AuthorizationServerEndpointsConfigurer endpoints) 方法为 JWT 存储模式。</p>
<p>改造用户客户端</p>
<h4 id="修改-application-yml-配置文件"><a href="#修改-application-yml-配置文件" class="headerlink" title="修改 application.yml 配置文件"></a>修改 application.yml 配置文件</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">security:</span>  </span><br><span class="line">  <span class="attr">oauth2:</span>    </span><br><span class="line">    <span class="attr">client:</span>      </span><br><span class="line">      <span class="attr">client-id:</span> <span class="string">user-client</span>      </span><br><span class="line">      <span class="attr">client-secret:</span> <span class="string">user-secret-8888</span>      </span><br><span class="line">      <span class="attr">user-authorization-uri:</span> <span class="string">http://localhost:6001/oauth/authorize</span>      </span><br><span class="line">      <span class="attr">access-token-uri:</span> <span class="string">http://localhost:6001/oauth/token</span>   </span><br><span class="line">    <span class="attr">resource:</span>      </span><br><span class="line">      <span class="attr">jwt:</span>        </span><br><span class="line">        <span class="attr">key-uri:</span> <span class="string">http://localhost:6001/oauth/token_key</span>        </span><br><span class="line">        <span class="attr">key-value:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>
<p>注意认证服务端 JwtAccessTokenConverter设置的 SigningKey 要和配置文件中的 key-value 相同，不然会导致无法正常解码 JWT ，导致验证不通过。</p>
<h4 id="ResourceServerConfig-类的配置"><a href="#ResourceServerConfig-类的配置" class="headerlink" title="ResourceServerConfig 类的配置"></a>ResourceServerConfig 类的配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceServerConfig</span> <span class="keyword">extends</span> <span class="title">ResourceServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenStore <span class="title">jwtTokenStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtTokenStore(jwtAccessTokenConverter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtAccessTokenConverter <span class="title">jwtAccessTokenConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JwtAccessTokenConverter accessTokenConverter = <span class="keyword">new</span> JwtAccessTokenConverter();</span><br><span class="line">        accessTokenConverter.setSigningKey(<span class="string">&quot;dev&quot;</span>);</span><br><span class="line">        accessTokenConverter.setVerifierKey(<span class="string">&quot;dev&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> accessTokenConverter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenStore jwtTokenStore;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ResourceServerSecurityConfigurer resources)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        resources.tokenStore(jwtTokenStore);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="运行请求-token-接口的请求"><a href="#运行请求-token-接口的请求" class="headerlink" title="运行请求 token 接口的请求"></a>运行请求 token 接口的请求</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST http://localhost:6001/oauth/token?grant_type=password&amp;username=admin&amp;password=123456&amp;scope=all</span><br><span class="line">Accept: */*</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Authorization: Basic dXNlci1jbGllbnQ6dXNlci1zZWNyZXQtODg4OA==</span><br></pre></td></tr></table></figure>
<p>返回结果如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span>: <span class="string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NzE3NDM0OTQsInVzZXJfbmFtZSI6ImFkbWluIiwiYXV0aG9yaXRpZXMiOlsiUk9MRV9BRE1JTiJdLCJqdGkiOiI4Y2NhMjlhZi1lYTc3LTRmZTYtOWZlMS0zMjc0MTVkY2QyMWQiLCJjbGllbnRfaWQiOiJ1c2VyLWNsaWVudCIsInNjb3BlIjpbImFsbCJdfQ.0Ik3UwB1xjX2le5luEdtVAI_MEyu_OloRRYtPOvtvwM&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span>: <span class="string">&quot;bearer&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;refresh_token&quot;</span>: <span class="string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25hbWUiOiJhZG1pbiIsInNjb3BlIjpbImFsbCJdLCJhdGkiOiI4Y2NhMjlhZi1lYTc3LTRmZTYtOWZlMS0zMjc0MTVkY2QyMWQiLCJleHAiOjE1NzE3NzU4OTQsImF1dGhvcml0aWVzIjpbIlJPTEVfQURNSU4iXSwianRpIjoiZjdkMjg4NDUtMmU2ZC00ZmRjLTg1OGYtMWNiY2RlNzI1ZmMyIiwiY2xpZW50X2lkIjoidXNlci1jbGllbnQifQ.vk_msYtbrAr93h5sK4wy6EC2_wRD_cD_UBS8O6eRziw&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span>: <span class="number">3599</span>,</span><br><span class="line">  <span class="attr">&quot;scope&quot;</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;jti&quot;</span>: <span class="string">&quot;8cca29af-ea77-4fe6-9fe1-327415dcd21d&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们已经看到返回的 token 是 JWT 格式了，到 JWT 在线解码网站 jwt.io/ 或者 jwt.calebb.net/将 token 解码看一下<br><img src="http://qiniu.bigdudu.cn/20210625202319.png"></p>
<p>看到了没，user_name、client_id 等信息都在其中。</p>
<p>拿着返回的 token 请求用户客户端接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET http://localhost:6101/client-user/get</span><br><span class="line">Accept: */*</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Authorization: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1NzE3NDM0OTQsInVzZXJfbmFtZSI6ImFkbWluIiwiYXV0aG9yaXRpZXMiOlsiUk9MRV9BRE1JTiJdLCJqdGkiOiI4Y2NhMjlhZi1lYTc3LTRmZTYtOWZlMS0zMjc0MTVkY2QyMWQiLCJjbGllbnRfaWQiOiJ1c2VyLWNsaWVudCIsInNjb3BlIjpbImFsbCJdfQ.0Ik3UwB1xjX2le5luEdtVAI_MEyu_OloRRYtPOvtvwM</span><br></pre></td></tr></table></figure>
<p>增强 JWT</p>
<p>如果我想在 JWT 中加入额外的字段(比方说用户的其他信息)怎么办呢，当然可以。spring security oauth2 提供了 TokenEnhancer 增强器。其实不光 JWT ，RedisToken 的方式同样可以。</p>
<p>声明一个增强器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTokenEnhancer</span> <span class="keyword">implements</span> <span class="title">TokenEnhancer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2AccessToken <span class="title">enhance</span><span class="params">(OAuth2AccessToken oAuth2AccessToken, OAuth2Authentication oAuth2Authentication)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; info = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        info.put(<span class="string">&quot;jwt-ext&quot;</span>, <span class="string">&quot;JWT 扩展信息&quot;</span>);</span><br><span class="line">        ((DefaultOAuth2AccessToken) oAuth2AccessToken).setAdditionalInformation(info);</span><br><span class="line">        <span class="keyword">return</span> oAuth2AccessToken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过 oAuth2Authentication 可以拿到用户名等信息，通过这些我们可以在这里查询数据库或者缓存获取更多的信息，而这些信息都可以作为 JWT 扩展信息加入其中。</p>
<h4 id="OAuthConfig-配置类修改"><a href="#OAuthConfig-配置类修改" class="headerlink" title="OAuthConfig 配置类修改"></a>OAuthConfig 配置类修改</h4><p>注入增强器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Autowiredprivate</span></span><br><span class="line">TokenEnhancer jwtTokenEnhancer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Beanpublic</span></span><br><span class="line"><span class="function">TokenEnhancer <span class="title">jwtTokenEnhancer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JWTokenEnhancer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改 configure(final AuthorizationServerEndpointsConfigurer endpoints)方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Overridepublic</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">configure</span><span class="params">(<span class="keyword">final</span> AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span>&#123;    <span class="comment">/**     * jwt 增强模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    TokenEnhancerChain enhancerChain = <span class="keyword">new</span> TokenEnhancerChain();</span><br><span class="line">    List&lt;TokenEnhancer&gt; enhancerList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    enhancerList.add(jwtTokenEnhancer);</span><br><span class="line">    enhancerList.add(jwtAccessTokenConverter);</span><br><span class="line">    enhancerChain.setTokenEnhancers(enhancerList);</span><br><span class="line">    endpoints.tokenStore(jwtTokenStore).userDetailsService(kiteUserDetailsService)    <span class="comment">/**     * 支持 password 模式	</span></span><br><span class="line"><span class="comment">     */</span>.authenticationManager(authenticationManager).tokenEnhancer(enhancerChain).accessTokenConverter(jwtAccessTokenConverter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次请求 token ，返回内容中多了个刚刚加入的 jwt-ext 字段</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;access_token&quot;</span>: <span class="string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25hbWUiOiJhZG1pbiIsImp3dC1leHQiOiJKV1Qg5omp5bGV5L-h5oGvIiwic2NvcGUiOlsiYWxsIl0sImV4cCI6MTU3MTc0NTE3OCwiYXV0aG9yaXRpZXMiOlsiUk9MRV9BRE1JTiJdLCJqdGkiOiJhNDU1MWQ5ZS1iN2VkLTQ3NTktYjJmMS1mMGI5YjIxY2E0MmMiLCJjbGllbnRfaWQiOiJ1c2VyLWNsaWVudCJ9.5j4hNsVpktG2iKxNqR-q1rfcnhlyV3M6HUBx5cd6PiQ&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;token_type&quot;</span>: <span class="string">&quot;bearer&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;refresh_token&quot;</span>: <span class="string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25hbWUiOiJhZG1pbiIsImp3dC1leHQiOiJKV1Qg5omp5bGV5L-h5oGvIiwic2NvcGUiOlsiYWxsIl0sImF0aSI6ImE0NTUxZDllLWI3ZWQtNDc1OS1iMmYxLWYwYjliMjFjYTQyYyIsImV4cCI6MTU3MTc3NzU3OCwiYXV0aG9yaXRpZXMiOlsiUk9MRV9BRE1JTiJdLCJqdGkiOiJmNTI3ODJlOS0wOGRjLTQ2NGUtYmJhYy03OTMwNzYwYmZiZjciLCJjbGllbnRfaWQiOiJ1c2VyLWNsaWVudCJ9.UQMf140CG8U0eWh08nGlctpIye9iJ7p2i6NYHkGAwhY&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;expires_in&quot;</span>: <span class="number">3599</span>,</span><br><span class="line">  <span class="attr">&quot;scope&quot;</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;jwt-ext&quot;</span>: <span class="string">&quot;JWT 扩展信息&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;jti&quot;</span>: <span class="string">&quot;a4551d9e-b7ed-4759-b2f1-f0b9b21ca42c&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用户客户端解析 JWT 数据</p>
<p>我们如果在 JWT 中加入了额外信息，这些信息我们可能会用到，而在接收到 JWT 格式的 token 之后，用户客户端要把 JWT 解析出来。</p>
<p>引入 JWT 包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>加一个 RESTful 接口，在其中解析 JWT</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;jwt&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasAnyRole(&#x27;ROLE_ADMIN&#x27;)&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">jwtParser</span><span class="params">(Authentication authentication)</span> </span>&#123;</span><br><span class="line">    authentication.getCredentials();</span><br><span class="line">    OAuth2AuthenticationDetails details = (OAuth2AuthenticationDetails) authentication.getDetails();</span><br><span class="line">    String jwtToken = details.getTokenValue();</span><br><span class="line">    Claims claims =</span><br><span class="line">            Jwts.parser().setSigningKey(<span class="string">&quot;dev&quot;</span>.getBytes(StandardCharsets.UTF_8)).parseClaimsJws(jwtToken).getBody();</span><br><span class="line">    <span class="keyword">return</span> claims;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样注意其中签名的设置要与认证服务端相同。</p>
<p>用上一步的 token 请求上面的接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### 解析 jwt</span><br><span class="line">GET http://localhost:6101/client-user/jwt</span><br><span class="line">Accept: */*</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Authorization: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25hbWUiOiJhZG1pbiIsImp3dC1leHQiOiJKV1Qg5omp5bGV5L-h5oGvIiwic2NvcGUiOlsiYWxsIl0sImV4cCI6MTU3MTc0NTE3OCwiYXV0aG9yaXRpZXMiOlsiUk9MRV9BRE1JTiJdLCJqdGkiOiJhNDU1MWQ5ZS1iN2VkLTQ3NTktYjJmMS1mMGI5YjIxY2E0MmMiLCJjbGllbnRfaWQiOiJ1c2VyLWNsaWVudCJ9.5j4hNsVpktG2iKxNqR-q1rfcnhlyV3M6HUBx5cd6PiQ</span><br></pre></td></tr></table></figure>

<p>返回内容如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;user_name&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;jwt-ext&quot;</span>: <span class="string">&quot;JWT 扩展信息&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scope&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;all&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;exp&quot;</span>: <span class="number">1571745178</span>,</span><br><span class="line">  <span class="attr">&quot;authorities&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;ROLE_ADMIN&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;jti&quot;</span>: <span class="string">&quot;a4551d9e-b7ed-4759-b2f1-f0b9b21ca42c&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;client_id&quot;</span>: <span class="string">&quot;user-client&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>nacos</tag>
        <tag>springcloud</tag>
        <tag>oauth</tag>
      </tags>
  </entry>
</search>
